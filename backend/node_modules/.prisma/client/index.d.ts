
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  username: string
  password: string
  name: string
  created_at: Date
  modified_at: Date
  user_pic: string
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sid: string
  data: string
  expiresAt: Date
}

/**
 * Model Anime
 * 
 */
export type Anime = {
  id: number
  name: string
  category: string
  description: string
  anime_pic: string
  avg_rank: number
  amount: number
  created_at: Date
  modified_at: Date
}

/**
 * Model Anime_user_rank
 * 
 */
export type Anime_user_rank = {
  id: number
  user_id: number
  anime_id: number
  rank: string
  description: string
  anime_pic: string
  created_at: Date
  modified_at: Date
}

/**
 * Model Anime_user_planned
 * 
 */
export type Anime_user_planned = {
  id: number
  user_id: number
  anime_id: number
  isPlanned: boolean
  created_at: Date
  modified_at: Date
}

/**
 * Model Monthly_planner
 * 
 */
export type Monthly_planner = {
  id: number
  user_id: number
  month: string
  year: string
  notes: string
  created_at: Date
  modified_at: Date
}

/**
 * Model Monthly_to_do_list
 * 
 */
export type Monthly_to_do_list = {
  id: number
  monthly_planner_id: number
  data: string
}

/**
 * Model Daily_planner
 * 
 */
export type Daily_planner = {
  id: number
  monthly_planner_id: number
  day: string
  weekday: string
  notes: string
  created_at: Date
  modified_at: Date
}

/**
 * Model Daily_to_do_list
 * 
 */
export type Daily_to_do_list = {
  id: number
  daily_planner_id: number
  data: string
}

/**
 * Model Daily_most_important
 * 
 */
export type Daily_most_important = {
  id: number
  daily_planner_id: number
  data: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.anime`: Exposes CRUD operations for the **Anime** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anime
    * const anime = await prisma.anime.findMany()
    * ```
    */
  get anime(): Prisma.AnimeDelegate<GlobalReject>;

  /**
   * `prisma.anime_user_rank`: Exposes CRUD operations for the **Anime_user_rank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anime_user_ranks
    * const anime_user_ranks = await prisma.anime_user_rank.findMany()
    * ```
    */
  get anime_user_rank(): Prisma.Anime_user_rankDelegate<GlobalReject>;

  /**
   * `prisma.anime_user_planned`: Exposes CRUD operations for the **Anime_user_planned** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anime_user_planneds
    * const anime_user_planneds = await prisma.anime_user_planned.findMany()
    * ```
    */
  get anime_user_planned(): Prisma.Anime_user_plannedDelegate<GlobalReject>;

  /**
   * `prisma.monthly_planner`: Exposes CRUD operations for the **Monthly_planner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Monthly_planners
    * const monthly_planners = await prisma.monthly_planner.findMany()
    * ```
    */
  get monthly_planner(): Prisma.Monthly_plannerDelegate<GlobalReject>;

  /**
   * `prisma.monthly_to_do_list`: Exposes CRUD operations for the **Monthly_to_do_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Monthly_to_do_lists
    * const monthly_to_do_lists = await prisma.monthly_to_do_list.findMany()
    * ```
    */
  get monthly_to_do_list(): Prisma.Monthly_to_do_listDelegate<GlobalReject>;

  /**
   * `prisma.daily_planner`: Exposes CRUD operations for the **Daily_planner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Daily_planners
    * const daily_planners = await prisma.daily_planner.findMany()
    * ```
    */
  get daily_planner(): Prisma.Daily_plannerDelegate<GlobalReject>;

  /**
   * `prisma.daily_to_do_list`: Exposes CRUD operations for the **Daily_to_do_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Daily_to_do_lists
    * const daily_to_do_lists = await prisma.daily_to_do_list.findMany()
    * ```
    */
  get daily_to_do_list(): Prisma.Daily_to_do_listDelegate<GlobalReject>;

  /**
   * `prisma.daily_most_important`: Exposes CRUD operations for the **Daily_most_important** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Daily_most_importants
    * const daily_most_importants = await prisma.daily_most_important.findMany()
    * ```
    */
  get daily_most_important(): Prisma.Daily_most_importantDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Anime: 'Anime',
    Anime_user_rank: 'Anime_user_rank',
    Anime_user_planned: 'Anime_user_planned',
    Monthly_planner: 'Monthly_planner',
    Monthly_to_do_list: 'Monthly_to_do_list',
    Daily_planner: 'Daily_planner',
    Daily_to_do_list: 'Daily_to_do_list',
    Daily_most_important: 'Daily_most_important'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    anime: number
    anime_user_rank: number
    anime_user_planned: number
    monthly_planner: number
  }

  export type UserCountOutputTypeSelect = {
    anime?: boolean
    anime_user_rank?: boolean
    anime_user_planned?: boolean
    monthly_planner?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AnimeCountOutputType
   */


  export type AnimeCountOutputType = {
    users: number
    anime_user_rank: number
    anime_user_planned: number
  }

  export type AnimeCountOutputTypeSelect = {
    users?: boolean
    anime_user_rank?: boolean
    anime_user_planned?: boolean
  }

  export type AnimeCountOutputTypeGetPayload<S extends boolean | null | undefined | AnimeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AnimeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AnimeCountOutputTypeArgs)
    ? AnimeCountOutputType 
    : S extends { select: any } & (AnimeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AnimeCountOutputType ? AnimeCountOutputType[P] : never
  } 
      : AnimeCountOutputType




  // Custom InputTypes

  /**
   * AnimeCountOutputType without action
   */
  export type AnimeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AnimeCountOutputType
     */
    select?: AnimeCountOutputTypeSelect | null
  }



  /**
   * Count Type Monthly_plannerCountOutputType
   */


  export type Monthly_plannerCountOutputType = {
    to_do_list: number
    daily_planner: number
  }

  export type Monthly_plannerCountOutputTypeSelect = {
    to_do_list?: boolean
    daily_planner?: boolean
  }

  export type Monthly_plannerCountOutputTypeGetPayload<S extends boolean | null | undefined | Monthly_plannerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Monthly_plannerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Monthly_plannerCountOutputTypeArgs)
    ? Monthly_plannerCountOutputType 
    : S extends { select: any } & (Monthly_plannerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Monthly_plannerCountOutputType ? Monthly_plannerCountOutputType[P] : never
  } 
      : Monthly_plannerCountOutputType




  // Custom InputTypes

  /**
   * Monthly_plannerCountOutputType without action
   */
  export type Monthly_plannerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Monthly_plannerCountOutputType
     */
    select?: Monthly_plannerCountOutputTypeSelect | null
  }



  /**
   * Count Type Daily_plannerCountOutputType
   */


  export type Daily_plannerCountOutputType = {
    to_do_list: number
    most_important: number
  }

  export type Daily_plannerCountOutputTypeSelect = {
    to_do_list?: boolean
    most_important?: boolean
  }

  export type Daily_plannerCountOutputTypeGetPayload<S extends boolean | null | undefined | Daily_plannerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Daily_plannerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Daily_plannerCountOutputTypeArgs)
    ? Daily_plannerCountOutputType 
    : S extends { select: any } & (Daily_plannerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Daily_plannerCountOutputType ? Daily_plannerCountOutputType[P] : never
  } 
      : Daily_plannerCountOutputType




  // Custom InputTypes

  /**
   * Daily_plannerCountOutputType without action
   */
  export type Daily_plannerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Daily_plannerCountOutputType
     */
    select?: Daily_plannerCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    name: string | null
    created_at: Date | null
    modified_at: Date | null
    user_pic: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    name: string | null
    created_at: Date | null
    modified_at: Date | null
    user_pic: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    name: number
    created_at: number
    modified_at: number
    user_pic: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    created_at?: true
    modified_at?: true
    user_pic?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    created_at?: true
    modified_at?: true
    user_pic?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    created_at?: true
    modified_at?: true
    user_pic?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    name: string
    created_at: Date
    modified_at: Date
    user_pic: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    created_at?: boolean
    modified_at?: boolean
    user_pic?: boolean
    anime?: boolean | User$animeArgs
    anime_user_rank?: boolean | User$anime_user_rankArgs
    anime_user_planned?: boolean | User$anime_user_plannedArgs
    monthly_planner?: boolean | User$monthly_plannerArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    anime?: boolean | User$animeArgs
    anime_user_rank?: boolean | User$anime_user_rankArgs
    anime_user_planned?: boolean | User$anime_user_plannedArgs
    monthly_planner?: boolean | User$monthly_plannerArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'anime' ? Array < AnimeGetPayload<S['include'][P]>>  :
        P extends 'anime_user_rank' ? Array < Anime_user_rankGetPayload<S['include'][P]>>  :
        P extends 'anime_user_planned' ? Array < Anime_user_plannedGetPayload<S['include'][P]>>  :
        P extends 'monthly_planner' ? Array < Monthly_plannerGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'anime' ? Array < AnimeGetPayload<S['select'][P]>>  :
        P extends 'anime_user_rank' ? Array < Anime_user_rankGetPayload<S['select'][P]>>  :
        P extends 'anime_user_planned' ? Array < Anime_user_plannedGetPayload<S['select'][P]>>  :
        P extends 'monthly_planner' ? Array < Monthly_plannerGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    anime<T extends User$animeArgs= {}>(args?: Subset<T, User$animeArgs>): Prisma.PrismaPromise<Array<AnimeGetPayload<T>>| Null>;

    anime_user_rank<T extends User$anime_user_rankArgs= {}>(args?: Subset<T, User$anime_user_rankArgs>): Prisma.PrismaPromise<Array<Anime_user_rankGetPayload<T>>| Null>;

    anime_user_planned<T extends User$anime_user_plannedArgs= {}>(args?: Subset<T, User$anime_user_plannedArgs>): Prisma.PrismaPromise<Array<Anime_user_plannedGetPayload<T>>| Null>;

    monthly_planner<T extends User$monthly_plannerArgs= {}>(args?: Subset<T, User$monthly_plannerArgs>): Prisma.PrismaPromise<Array<Monthly_plannerGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.anime
   */
  export type User$animeArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    where?: AnimeWhereInput
    orderBy?: Enumerable<AnimeOrderByWithRelationAndSearchRelevanceInput>
    cursor?: AnimeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }


  /**
   * User.anime_user_rank
   */
  export type User$anime_user_rankArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    where?: Anime_user_rankWhereInput
    orderBy?: Enumerable<Anime_user_rankOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Anime_user_rankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Anime_user_rankScalarFieldEnum>
  }


  /**
   * User.anime_user_planned
   */
  export type User$anime_user_plannedArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    where?: Anime_user_plannedWhereInput
    orderBy?: Enumerable<Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Anime_user_plannedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Anime_user_plannedScalarFieldEnum>
  }


  /**
   * User.monthly_planner
   */
  export type User$monthly_plannerArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    where?: Monthly_plannerWhereInput
    orderBy?: Enumerable<Monthly_plannerOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Monthly_plannerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Monthly_plannerScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sid: string | null
    data: string | null
    expiresAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sid: string | null
    data: string | null
    expiresAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sid: number
    data: number
    expiresAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sid?: true
    data?: true
    expiresAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sid?: true
    data?: true
    expiresAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sid?: true
    data?: true
    expiresAt?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sid: string
    data: string
    expiresAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sid?: boolean
    data?: boolean
    expiresAt?: boolean
  }


  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
  }



  /**
   * Model Anime
   */


  export type AggregateAnime = {
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  export type AnimeAvgAggregateOutputType = {
    id: number | null
    avg_rank: number | null
    amount: number | null
  }

  export type AnimeSumAggregateOutputType = {
    id: number | null
    avg_rank: number | null
    amount: number | null
  }

  export type AnimeMinAggregateOutputType = {
    id: number | null
    name: string | null
    category: string | null
    description: string | null
    anime_pic: string | null
    avg_rank: number | null
    amount: number | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type AnimeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    category: string | null
    description: string | null
    anime_pic: string | null
    avg_rank: number | null
    amount: number | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type AnimeCountAggregateOutputType = {
    id: number
    name: number
    category: number
    description: number
    anime_pic: number
    avg_rank: number
    amount: number
    created_at: number
    modified_at: number
    _all: number
  }


  export type AnimeAvgAggregateInputType = {
    id?: true
    avg_rank?: true
    amount?: true
  }

  export type AnimeSumAggregateInputType = {
    id?: true
    avg_rank?: true
    amount?: true
  }

  export type AnimeMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    anime_pic?: true
    avg_rank?: true
    amount?: true
    created_at?: true
    modified_at?: true
  }

  export type AnimeMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    anime_pic?: true
    avg_rank?: true
    amount?: true
    created_at?: true
    modified_at?: true
  }

  export type AnimeCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    anime_pic?: true
    avg_rank?: true
    amount?: true
    created_at?: true
    modified_at?: true
    _all?: true
  }

  export type AnimeAggregateArgs = {
    /**
     * Filter which Anime to aggregate.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: Enumerable<AnimeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anime
    **/
    _count?: true | AnimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimeMaxAggregateInputType
  }

  export type GetAnimeAggregateType<T extends AnimeAggregateArgs> = {
        [P in keyof T & keyof AggregateAnime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnime[P]>
      : GetScalarType<T[P], AggregateAnime[P]>
  }




  export type AnimeGroupByArgs = {
    where?: AnimeWhereInput
    orderBy?: Enumerable<AnimeOrderByWithAggregationInput>
    by: AnimeScalarFieldEnum[]
    having?: AnimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimeCountAggregateInputType | true
    _avg?: AnimeAvgAggregateInputType
    _sum?: AnimeSumAggregateInputType
    _min?: AnimeMinAggregateInputType
    _max?: AnimeMaxAggregateInputType
  }


  export type AnimeGroupByOutputType = {
    id: number
    name: string
    category: string
    description: string
    anime_pic: string
    avg_rank: number
    amount: number
    created_at: Date
    modified_at: Date
    _count: AnimeCountAggregateOutputType | null
    _avg: AnimeAvgAggregateOutputType | null
    _sum: AnimeSumAggregateOutputType | null
    _min: AnimeMinAggregateOutputType | null
    _max: AnimeMaxAggregateOutputType | null
  }

  type GetAnimeGroupByPayload<T extends AnimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimeGroupByOutputType[P]>
            : GetScalarType<T[P], AnimeGroupByOutputType[P]>
        }
      >
    >


  export type AnimeSelect = {
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    anime_pic?: boolean
    avg_rank?: boolean
    amount?: boolean
    created_at?: boolean
    modified_at?: boolean
    users?: boolean | Anime$usersArgs
    anime_user_rank?: boolean | Anime$anime_user_rankArgs
    anime_user_planned?: boolean | Anime$anime_user_plannedArgs
    _count?: boolean | AnimeCountOutputTypeArgs
  }


  export type AnimeInclude = {
    users?: boolean | Anime$usersArgs
    anime_user_rank?: boolean | Anime$anime_user_rankArgs
    anime_user_planned?: boolean | Anime$anime_user_plannedArgs
    _count?: boolean | AnimeCountOutputTypeArgs
  }

  export type AnimeGetPayload<S extends boolean | null | undefined | AnimeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Anime :
    S extends undefined ? never :
    S extends { include: any } & (AnimeArgs | AnimeFindManyArgs)
    ? Anime  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'anime_user_rank' ? Array < Anime_user_rankGetPayload<S['include'][P]>>  :
        P extends 'anime_user_planned' ? Array < Anime_user_plannedGetPayload<S['include'][P]>>  :
        P extends '_count' ? AnimeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AnimeArgs | AnimeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'anime_user_rank' ? Array < Anime_user_rankGetPayload<S['select'][P]>>  :
        P extends 'anime_user_planned' ? Array < Anime_user_plannedGetPayload<S['select'][P]>>  :
        P extends '_count' ? AnimeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Anime ? Anime[P] : never
  } 
      : Anime


  type AnimeCountArgs = 
    Omit<AnimeFindManyArgs, 'select' | 'include'> & {
      select?: AnimeCountAggregateInputType | true
    }

  export interface AnimeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Anime that matches the filter.
     * @param {AnimeFindUniqueArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnimeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnimeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anime'> extends True ? Prisma__AnimeClient<AnimeGetPayload<T>> : Prisma__AnimeClient<AnimeGetPayload<T> | null, null>

    /**
     * Find one Anime that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnimeFindUniqueOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnimeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AnimeFindUniqueOrThrowArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Find the first Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnimeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnimeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anime'> extends True ? Prisma__AnimeClient<AnimeGetPayload<T>> : Prisma__AnimeClient<AnimeGetPayload<T> | null, null>

    /**
     * Find the first Anime that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindFirstOrThrowArgs} args - Arguments to find a Anime
     * @example
     * // Get one Anime
     * const anime = await prisma.anime.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnimeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AnimeFindFirstOrThrowArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Find zero or more Anime that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anime
     * const anime = await prisma.anime.findMany()
     * 
     * // Get first 10 Anime
     * const anime = await prisma.anime.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animeWithIdOnly = await prisma.anime.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnimeFindManyArgs>(
      args?: SelectSubset<T, AnimeFindManyArgs>
    ): Prisma.PrismaPromise<Array<AnimeGetPayload<T>>>

    /**
     * Create a Anime.
     * @param {AnimeCreateArgs} args - Arguments to create a Anime.
     * @example
     * // Create one Anime
     * const Anime = await prisma.anime.create({
     *   data: {
     *     // ... data to create a Anime
     *   }
     * })
     * 
    **/
    create<T extends AnimeCreateArgs>(
      args: SelectSubset<T, AnimeCreateArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Create many Anime.
     *     @param {AnimeCreateManyArgs} args - Arguments to create many Anime.
     *     @example
     *     // Create many Anime
     *     const anime = await prisma.anime.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnimeCreateManyArgs>(
      args?: SelectSubset<T, AnimeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Anime.
     * @param {AnimeDeleteArgs} args - Arguments to delete one Anime.
     * @example
     * // Delete one Anime
     * const Anime = await prisma.anime.delete({
     *   where: {
     *     // ... filter to delete one Anime
     *   }
     * })
     * 
    **/
    delete<T extends AnimeDeleteArgs>(
      args: SelectSubset<T, AnimeDeleteArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Update one Anime.
     * @param {AnimeUpdateArgs} args - Arguments to update one Anime.
     * @example
     * // Update one Anime
     * const anime = await prisma.anime.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnimeUpdateArgs>(
      args: SelectSubset<T, AnimeUpdateArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Delete zero or more Anime.
     * @param {AnimeDeleteManyArgs} args - Arguments to filter Anime to delete.
     * @example
     * // Delete a few Anime
     * const { count } = await prisma.anime.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnimeDeleteManyArgs>(
      args?: SelectSubset<T, AnimeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anime
     * const anime = await prisma.anime.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnimeUpdateManyArgs>(
      args: SelectSubset<T, AnimeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Anime.
     * @param {AnimeUpsertArgs} args - Arguments to update or create a Anime.
     * @example
     * // Update or create a Anime
     * const anime = await prisma.anime.upsert({
     *   create: {
     *     // ... data to create a Anime
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anime we want to update
     *   }
     * })
    **/
    upsert<T extends AnimeUpsertArgs>(
      args: SelectSubset<T, AnimeUpsertArgs>
    ): Prisma__AnimeClient<AnimeGetPayload<T>>

    /**
     * Count the number of Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeCountArgs} args - Arguments to filter Anime to count.
     * @example
     * // Count the number of Anime
     * const count = await prisma.anime.count({
     *   where: {
     *     // ... the filter for the Anime we want to count
     *   }
     * })
    **/
    count<T extends AnimeCountArgs>(
      args?: Subset<T, AnimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimeAggregateArgs>(args: Subset<T, AnimeAggregateArgs>): Prisma.PrismaPromise<GetAnimeAggregateType<T>>

    /**
     * Group by Anime.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimeGroupByArgs['orderBy'] }
        : { orderBy?: AnimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Anime.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnimeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends Anime$usersArgs= {}>(args?: Subset<T, Anime$usersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    anime_user_rank<T extends Anime$anime_user_rankArgs= {}>(args?: Subset<T, Anime$anime_user_rankArgs>): Prisma.PrismaPromise<Array<Anime_user_rankGetPayload<T>>| Null>;

    anime_user_planned<T extends Anime$anime_user_plannedArgs= {}>(args?: Subset<T, Anime$anime_user_plannedArgs>): Prisma.PrismaPromise<Array<Anime_user_plannedGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Anime base type for findUnique actions
   */
  export type AnimeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     */
    where: AnimeWhereUniqueInput
  }

  /**
   * Anime findUnique
   */
  export interface AnimeFindUniqueArgs extends AnimeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime findUniqueOrThrow
   */
  export type AnimeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     */
    where: AnimeWhereUniqueInput
  }


  /**
   * Anime base type for findFirst actions
   */
  export type AnimeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: Enumerable<AnimeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     */
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }

  /**
   * Anime findFirst
   */
  export interface AnimeFindFirstArgs extends AnimeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime findFirstOrThrow
   */
  export type AnimeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: Enumerable<AnimeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime.
     */
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }


  /**
   * Anime findMany
   */
  export type AnimeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * Filter, which Anime to fetch.
     */
    where?: AnimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime to fetch.
     */
    orderBy?: Enumerable<AnimeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anime.
     */
    cursor?: AnimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime.
     */
    skip?: number
    distinct?: Enumerable<AnimeScalarFieldEnum>
  }


  /**
   * Anime create
   */
  export type AnimeCreateArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * The data needed to create a Anime.
     */
    data: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
  }


  /**
   * Anime createMany
   */
  export type AnimeCreateManyArgs = {
    /**
     * The data used to create many Anime.
     */
    data: Enumerable<AnimeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Anime update
   */
  export type AnimeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * The data needed to update a Anime.
     */
    data: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
    /**
     * Choose, which Anime to update.
     */
    where: AnimeWhereUniqueInput
  }


  /**
   * Anime updateMany
   */
  export type AnimeUpdateManyArgs = {
    /**
     * The data used to update Anime.
     */
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyInput>
    /**
     * Filter which Anime to update
     */
    where?: AnimeWhereInput
  }


  /**
   * Anime upsert
   */
  export type AnimeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * The filter to search for the Anime to update in case it exists.
     */
    where: AnimeWhereUniqueInput
    /**
     * In case the Anime found by the `where` argument doesn't exist, create a new Anime with this data.
     */
    create: XOR<AnimeCreateInput, AnimeUncheckedCreateInput>
    /**
     * In case the Anime was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimeUpdateInput, AnimeUncheckedUpdateInput>
  }


  /**
   * Anime delete
   */
  export type AnimeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
    /**
     * Filter which Anime to delete.
     */
    where: AnimeWhereUniqueInput
  }


  /**
   * Anime deleteMany
   */
  export type AnimeDeleteManyArgs = {
    /**
     * Filter which Anime to delete
     */
    where?: AnimeWhereInput
  }


  /**
   * Anime.users
   */
  export type Anime$usersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Anime.anime_user_rank
   */
  export type Anime$anime_user_rankArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    where?: Anime_user_rankWhereInput
    orderBy?: Enumerable<Anime_user_rankOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Anime_user_rankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Anime_user_rankScalarFieldEnum>
  }


  /**
   * Anime.anime_user_planned
   */
  export type Anime$anime_user_plannedArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    where?: Anime_user_plannedWhereInput
    orderBy?: Enumerable<Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Anime_user_plannedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Anime_user_plannedScalarFieldEnum>
  }


  /**
   * Anime without action
   */
  export type AnimeArgs = {
    /**
     * Select specific fields to fetch from the Anime
     */
    select?: AnimeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnimeInclude | null
  }



  /**
   * Model Anime_user_rank
   */


  export type AggregateAnime_user_rank = {
    _count: Anime_user_rankCountAggregateOutputType | null
    _avg: Anime_user_rankAvgAggregateOutputType | null
    _sum: Anime_user_rankSumAggregateOutputType | null
    _min: Anime_user_rankMinAggregateOutputType | null
    _max: Anime_user_rankMaxAggregateOutputType | null
  }

  export type Anime_user_rankAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
  }

  export type Anime_user_rankSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
  }

  export type Anime_user_rankMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
    rank: string | null
    description: string | null
    anime_pic: string | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Anime_user_rankMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
    rank: string | null
    description: string | null
    anime_pic: string | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Anime_user_rankCountAggregateOutputType = {
    id: number
    user_id: number
    anime_id: number
    rank: number
    description: number
    anime_pic: number
    created_at: number
    modified_at: number
    _all: number
  }


  export type Anime_user_rankAvgAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
  }

  export type Anime_user_rankSumAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
  }

  export type Anime_user_rankMinAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
    rank?: true
    description?: true
    anime_pic?: true
    created_at?: true
    modified_at?: true
  }

  export type Anime_user_rankMaxAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
    rank?: true
    description?: true
    anime_pic?: true
    created_at?: true
    modified_at?: true
  }

  export type Anime_user_rankCountAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
    rank?: true
    description?: true
    anime_pic?: true
    created_at?: true
    modified_at?: true
    _all?: true
  }

  export type Anime_user_rankAggregateArgs = {
    /**
     * Filter which Anime_user_rank to aggregate.
     */
    where?: Anime_user_rankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_ranks to fetch.
     */
    orderBy?: Enumerable<Anime_user_rankOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Anime_user_rankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anime_user_ranks
    **/
    _count?: true | Anime_user_rankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Anime_user_rankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Anime_user_rankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Anime_user_rankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Anime_user_rankMaxAggregateInputType
  }

  export type GetAnime_user_rankAggregateType<T extends Anime_user_rankAggregateArgs> = {
        [P in keyof T & keyof AggregateAnime_user_rank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnime_user_rank[P]>
      : GetScalarType<T[P], AggregateAnime_user_rank[P]>
  }




  export type Anime_user_rankGroupByArgs = {
    where?: Anime_user_rankWhereInput
    orderBy?: Enumerable<Anime_user_rankOrderByWithAggregationInput>
    by: Anime_user_rankScalarFieldEnum[]
    having?: Anime_user_rankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Anime_user_rankCountAggregateInputType | true
    _avg?: Anime_user_rankAvgAggregateInputType
    _sum?: Anime_user_rankSumAggregateInputType
    _min?: Anime_user_rankMinAggregateInputType
    _max?: Anime_user_rankMaxAggregateInputType
  }


  export type Anime_user_rankGroupByOutputType = {
    id: number
    user_id: number
    anime_id: number
    rank: string
    description: string
    anime_pic: string
    created_at: Date
    modified_at: Date
    _count: Anime_user_rankCountAggregateOutputType | null
    _avg: Anime_user_rankAvgAggregateOutputType | null
    _sum: Anime_user_rankSumAggregateOutputType | null
    _min: Anime_user_rankMinAggregateOutputType | null
    _max: Anime_user_rankMaxAggregateOutputType | null
  }

  type GetAnime_user_rankGroupByPayload<T extends Anime_user_rankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Anime_user_rankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Anime_user_rankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Anime_user_rankGroupByOutputType[P]>
            : GetScalarType<T[P], Anime_user_rankGroupByOutputType[P]>
        }
      >
    >


  export type Anime_user_rankSelect = {
    id?: boolean
    user_id?: boolean
    anime_id?: boolean
    rank?: boolean
    description?: boolean
    anime_pic?: boolean
    created_at?: boolean
    modified_at?: boolean
    User?: boolean | UserArgs
    anime?: boolean | AnimeArgs
  }


  export type Anime_user_rankInclude = {
    User?: boolean | UserArgs
    anime?: boolean | AnimeArgs
  }

  export type Anime_user_rankGetPayload<S extends boolean | null | undefined | Anime_user_rankArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Anime_user_rank :
    S extends undefined ? never :
    S extends { include: any } & (Anime_user_rankArgs | Anime_user_rankFindManyArgs)
    ? Anime_user_rank  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'anime' ? AnimeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Anime_user_rankArgs | Anime_user_rankFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'anime' ? AnimeGetPayload<S['select'][P]> :  P extends keyof Anime_user_rank ? Anime_user_rank[P] : never
  } 
      : Anime_user_rank


  type Anime_user_rankCountArgs = 
    Omit<Anime_user_rankFindManyArgs, 'select' | 'include'> & {
      select?: Anime_user_rankCountAggregateInputType | true
    }

  export interface Anime_user_rankDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Anime_user_rank that matches the filter.
     * @param {Anime_user_rankFindUniqueArgs} args - Arguments to find a Anime_user_rank
     * @example
     * // Get one Anime_user_rank
     * const anime_user_rank = await prisma.anime_user_rank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Anime_user_rankFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Anime_user_rankFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anime_user_rank'> extends True ? Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>> : Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T> | null, null>

    /**
     * Find one Anime_user_rank that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Anime_user_rankFindUniqueOrThrowArgs} args - Arguments to find a Anime_user_rank
     * @example
     * // Get one Anime_user_rank
     * const anime_user_rank = await prisma.anime_user_rank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Anime_user_rankFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Anime_user_rankFindUniqueOrThrowArgs>
    ): Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>>

    /**
     * Find the first Anime_user_rank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankFindFirstArgs} args - Arguments to find a Anime_user_rank
     * @example
     * // Get one Anime_user_rank
     * const anime_user_rank = await prisma.anime_user_rank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Anime_user_rankFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Anime_user_rankFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anime_user_rank'> extends True ? Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>> : Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T> | null, null>

    /**
     * Find the first Anime_user_rank that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankFindFirstOrThrowArgs} args - Arguments to find a Anime_user_rank
     * @example
     * // Get one Anime_user_rank
     * const anime_user_rank = await prisma.anime_user_rank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Anime_user_rankFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Anime_user_rankFindFirstOrThrowArgs>
    ): Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>>

    /**
     * Find zero or more Anime_user_ranks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anime_user_ranks
     * const anime_user_ranks = await prisma.anime_user_rank.findMany()
     * 
     * // Get first 10 Anime_user_ranks
     * const anime_user_ranks = await prisma.anime_user_rank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anime_user_rankWithIdOnly = await prisma.anime_user_rank.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Anime_user_rankFindManyArgs>(
      args?: SelectSubset<T, Anime_user_rankFindManyArgs>
    ): Prisma.PrismaPromise<Array<Anime_user_rankGetPayload<T>>>

    /**
     * Create a Anime_user_rank.
     * @param {Anime_user_rankCreateArgs} args - Arguments to create a Anime_user_rank.
     * @example
     * // Create one Anime_user_rank
     * const Anime_user_rank = await prisma.anime_user_rank.create({
     *   data: {
     *     // ... data to create a Anime_user_rank
     *   }
     * })
     * 
    **/
    create<T extends Anime_user_rankCreateArgs>(
      args: SelectSubset<T, Anime_user_rankCreateArgs>
    ): Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>>

    /**
     * Create many Anime_user_ranks.
     *     @param {Anime_user_rankCreateManyArgs} args - Arguments to create many Anime_user_ranks.
     *     @example
     *     // Create many Anime_user_ranks
     *     const anime_user_rank = await prisma.anime_user_rank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Anime_user_rankCreateManyArgs>(
      args?: SelectSubset<T, Anime_user_rankCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Anime_user_rank.
     * @param {Anime_user_rankDeleteArgs} args - Arguments to delete one Anime_user_rank.
     * @example
     * // Delete one Anime_user_rank
     * const Anime_user_rank = await prisma.anime_user_rank.delete({
     *   where: {
     *     // ... filter to delete one Anime_user_rank
     *   }
     * })
     * 
    **/
    delete<T extends Anime_user_rankDeleteArgs>(
      args: SelectSubset<T, Anime_user_rankDeleteArgs>
    ): Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>>

    /**
     * Update one Anime_user_rank.
     * @param {Anime_user_rankUpdateArgs} args - Arguments to update one Anime_user_rank.
     * @example
     * // Update one Anime_user_rank
     * const anime_user_rank = await prisma.anime_user_rank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Anime_user_rankUpdateArgs>(
      args: SelectSubset<T, Anime_user_rankUpdateArgs>
    ): Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>>

    /**
     * Delete zero or more Anime_user_ranks.
     * @param {Anime_user_rankDeleteManyArgs} args - Arguments to filter Anime_user_ranks to delete.
     * @example
     * // Delete a few Anime_user_ranks
     * const { count } = await prisma.anime_user_rank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Anime_user_rankDeleteManyArgs>(
      args?: SelectSubset<T, Anime_user_rankDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime_user_ranks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anime_user_ranks
     * const anime_user_rank = await prisma.anime_user_rank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Anime_user_rankUpdateManyArgs>(
      args: SelectSubset<T, Anime_user_rankUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Anime_user_rank.
     * @param {Anime_user_rankUpsertArgs} args - Arguments to update or create a Anime_user_rank.
     * @example
     * // Update or create a Anime_user_rank
     * const anime_user_rank = await prisma.anime_user_rank.upsert({
     *   create: {
     *     // ... data to create a Anime_user_rank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anime_user_rank we want to update
     *   }
     * })
    **/
    upsert<T extends Anime_user_rankUpsertArgs>(
      args: SelectSubset<T, Anime_user_rankUpsertArgs>
    ): Prisma__Anime_user_rankClient<Anime_user_rankGetPayload<T>>

    /**
     * Count the number of Anime_user_ranks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankCountArgs} args - Arguments to filter Anime_user_ranks to count.
     * @example
     * // Count the number of Anime_user_ranks
     * const count = await prisma.anime_user_rank.count({
     *   where: {
     *     // ... the filter for the Anime_user_ranks we want to count
     *   }
     * })
    **/
    count<T extends Anime_user_rankCountArgs>(
      args?: Subset<T, Anime_user_rankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Anime_user_rankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anime_user_rank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Anime_user_rankAggregateArgs>(args: Subset<T, Anime_user_rankAggregateArgs>): Prisma.PrismaPromise<GetAnime_user_rankAggregateType<T>>

    /**
     * Group by Anime_user_rank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_rankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Anime_user_rankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Anime_user_rankGroupByArgs['orderBy'] }
        : { orderBy?: Anime_user_rankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Anime_user_rankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnime_user_rankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Anime_user_rank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Anime_user_rankClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    anime<T extends AnimeArgs= {}>(args?: Subset<T, AnimeArgs>): Prisma__AnimeClient<AnimeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Anime_user_rank base type for findUnique actions
   */
  export type Anime_user_rankFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * Filter, which Anime_user_rank to fetch.
     */
    where: Anime_user_rankWhereUniqueInput
  }

  /**
   * Anime_user_rank findUnique
   */
  export interface Anime_user_rankFindUniqueArgs extends Anime_user_rankFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime_user_rank findUniqueOrThrow
   */
  export type Anime_user_rankFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * Filter, which Anime_user_rank to fetch.
     */
    where: Anime_user_rankWhereUniqueInput
  }


  /**
   * Anime_user_rank base type for findFirst actions
   */
  export type Anime_user_rankFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * Filter, which Anime_user_rank to fetch.
     */
    where?: Anime_user_rankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_ranks to fetch.
     */
    orderBy?: Enumerable<Anime_user_rankOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime_user_ranks.
     */
    cursor?: Anime_user_rankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime_user_ranks.
     */
    distinct?: Enumerable<Anime_user_rankScalarFieldEnum>
  }

  /**
   * Anime_user_rank findFirst
   */
  export interface Anime_user_rankFindFirstArgs extends Anime_user_rankFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime_user_rank findFirstOrThrow
   */
  export type Anime_user_rankFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * Filter, which Anime_user_rank to fetch.
     */
    where?: Anime_user_rankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_ranks to fetch.
     */
    orderBy?: Enumerable<Anime_user_rankOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime_user_ranks.
     */
    cursor?: Anime_user_rankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime_user_ranks.
     */
    distinct?: Enumerable<Anime_user_rankScalarFieldEnum>
  }


  /**
   * Anime_user_rank findMany
   */
  export type Anime_user_rankFindManyArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * Filter, which Anime_user_ranks to fetch.
     */
    where?: Anime_user_rankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_ranks to fetch.
     */
    orderBy?: Enumerable<Anime_user_rankOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anime_user_ranks.
     */
    cursor?: Anime_user_rankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_ranks.
     */
    skip?: number
    distinct?: Enumerable<Anime_user_rankScalarFieldEnum>
  }


  /**
   * Anime_user_rank create
   */
  export type Anime_user_rankCreateArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * The data needed to create a Anime_user_rank.
     */
    data: XOR<Anime_user_rankCreateInput, Anime_user_rankUncheckedCreateInput>
  }


  /**
   * Anime_user_rank createMany
   */
  export type Anime_user_rankCreateManyArgs = {
    /**
     * The data used to create many Anime_user_ranks.
     */
    data: Enumerable<Anime_user_rankCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Anime_user_rank update
   */
  export type Anime_user_rankUpdateArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * The data needed to update a Anime_user_rank.
     */
    data: XOR<Anime_user_rankUpdateInput, Anime_user_rankUncheckedUpdateInput>
    /**
     * Choose, which Anime_user_rank to update.
     */
    where: Anime_user_rankWhereUniqueInput
  }


  /**
   * Anime_user_rank updateMany
   */
  export type Anime_user_rankUpdateManyArgs = {
    /**
     * The data used to update Anime_user_ranks.
     */
    data: XOR<Anime_user_rankUpdateManyMutationInput, Anime_user_rankUncheckedUpdateManyInput>
    /**
     * Filter which Anime_user_ranks to update
     */
    where?: Anime_user_rankWhereInput
  }


  /**
   * Anime_user_rank upsert
   */
  export type Anime_user_rankUpsertArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * The filter to search for the Anime_user_rank to update in case it exists.
     */
    where: Anime_user_rankWhereUniqueInput
    /**
     * In case the Anime_user_rank found by the `where` argument doesn't exist, create a new Anime_user_rank with this data.
     */
    create: XOR<Anime_user_rankCreateInput, Anime_user_rankUncheckedCreateInput>
    /**
     * In case the Anime_user_rank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Anime_user_rankUpdateInput, Anime_user_rankUncheckedUpdateInput>
  }


  /**
   * Anime_user_rank delete
   */
  export type Anime_user_rankDeleteArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
    /**
     * Filter which Anime_user_rank to delete.
     */
    where: Anime_user_rankWhereUniqueInput
  }


  /**
   * Anime_user_rank deleteMany
   */
  export type Anime_user_rankDeleteManyArgs = {
    /**
     * Filter which Anime_user_ranks to delete
     */
    where?: Anime_user_rankWhereInput
  }


  /**
   * Anime_user_rank without action
   */
  export type Anime_user_rankArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_rank
     */
    select?: Anime_user_rankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_rankInclude | null
  }



  /**
   * Model Anime_user_planned
   */


  export type AggregateAnime_user_planned = {
    _count: Anime_user_plannedCountAggregateOutputType | null
    _avg: Anime_user_plannedAvgAggregateOutputType | null
    _sum: Anime_user_plannedSumAggregateOutputType | null
    _min: Anime_user_plannedMinAggregateOutputType | null
    _max: Anime_user_plannedMaxAggregateOutputType | null
  }

  export type Anime_user_plannedAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
  }

  export type Anime_user_plannedSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
  }

  export type Anime_user_plannedMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
    isPlanned: boolean | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Anime_user_plannedMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    anime_id: number | null
    isPlanned: boolean | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Anime_user_plannedCountAggregateOutputType = {
    id: number
    user_id: number
    anime_id: number
    isPlanned: number
    created_at: number
    modified_at: number
    _all: number
  }


  export type Anime_user_plannedAvgAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
  }

  export type Anime_user_plannedSumAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
  }

  export type Anime_user_plannedMinAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
    isPlanned?: true
    created_at?: true
    modified_at?: true
  }

  export type Anime_user_plannedMaxAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
    isPlanned?: true
    created_at?: true
    modified_at?: true
  }

  export type Anime_user_plannedCountAggregateInputType = {
    id?: true
    user_id?: true
    anime_id?: true
    isPlanned?: true
    created_at?: true
    modified_at?: true
    _all?: true
  }

  export type Anime_user_plannedAggregateArgs = {
    /**
     * Filter which Anime_user_planned to aggregate.
     */
    where?: Anime_user_plannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_planneds to fetch.
     */
    orderBy?: Enumerable<Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Anime_user_plannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_planneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_planneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anime_user_planneds
    **/
    _count?: true | Anime_user_plannedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Anime_user_plannedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Anime_user_plannedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Anime_user_plannedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Anime_user_plannedMaxAggregateInputType
  }

  export type GetAnime_user_plannedAggregateType<T extends Anime_user_plannedAggregateArgs> = {
        [P in keyof T & keyof AggregateAnime_user_planned]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnime_user_planned[P]>
      : GetScalarType<T[P], AggregateAnime_user_planned[P]>
  }




  export type Anime_user_plannedGroupByArgs = {
    where?: Anime_user_plannedWhereInput
    orderBy?: Enumerable<Anime_user_plannedOrderByWithAggregationInput>
    by: Anime_user_plannedScalarFieldEnum[]
    having?: Anime_user_plannedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Anime_user_plannedCountAggregateInputType | true
    _avg?: Anime_user_plannedAvgAggregateInputType
    _sum?: Anime_user_plannedSumAggregateInputType
    _min?: Anime_user_plannedMinAggregateInputType
    _max?: Anime_user_plannedMaxAggregateInputType
  }


  export type Anime_user_plannedGroupByOutputType = {
    id: number
    user_id: number
    anime_id: number
    isPlanned: boolean
    created_at: Date
    modified_at: Date
    _count: Anime_user_plannedCountAggregateOutputType | null
    _avg: Anime_user_plannedAvgAggregateOutputType | null
    _sum: Anime_user_plannedSumAggregateOutputType | null
    _min: Anime_user_plannedMinAggregateOutputType | null
    _max: Anime_user_plannedMaxAggregateOutputType | null
  }

  type GetAnime_user_plannedGroupByPayload<T extends Anime_user_plannedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Anime_user_plannedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Anime_user_plannedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Anime_user_plannedGroupByOutputType[P]>
            : GetScalarType<T[P], Anime_user_plannedGroupByOutputType[P]>
        }
      >
    >


  export type Anime_user_plannedSelect = {
    id?: boolean
    user_id?: boolean
    anime_id?: boolean
    isPlanned?: boolean
    created_at?: boolean
    modified_at?: boolean
    User?: boolean | UserArgs
    anime?: boolean | AnimeArgs
  }


  export type Anime_user_plannedInclude = {
    User?: boolean | UserArgs
    anime?: boolean | AnimeArgs
  }

  export type Anime_user_plannedGetPayload<S extends boolean | null | undefined | Anime_user_plannedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Anime_user_planned :
    S extends undefined ? never :
    S extends { include: any } & (Anime_user_plannedArgs | Anime_user_plannedFindManyArgs)
    ? Anime_user_planned  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'anime' ? AnimeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Anime_user_plannedArgs | Anime_user_plannedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'anime' ? AnimeGetPayload<S['select'][P]> :  P extends keyof Anime_user_planned ? Anime_user_planned[P] : never
  } 
      : Anime_user_planned


  type Anime_user_plannedCountArgs = 
    Omit<Anime_user_plannedFindManyArgs, 'select' | 'include'> & {
      select?: Anime_user_plannedCountAggregateInputType | true
    }

  export interface Anime_user_plannedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Anime_user_planned that matches the filter.
     * @param {Anime_user_plannedFindUniqueArgs} args - Arguments to find a Anime_user_planned
     * @example
     * // Get one Anime_user_planned
     * const anime_user_planned = await prisma.anime_user_planned.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Anime_user_plannedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Anime_user_plannedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anime_user_planned'> extends True ? Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>> : Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T> | null, null>

    /**
     * Find one Anime_user_planned that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Anime_user_plannedFindUniqueOrThrowArgs} args - Arguments to find a Anime_user_planned
     * @example
     * // Get one Anime_user_planned
     * const anime_user_planned = await prisma.anime_user_planned.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Anime_user_plannedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Anime_user_plannedFindUniqueOrThrowArgs>
    ): Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>>

    /**
     * Find the first Anime_user_planned that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedFindFirstArgs} args - Arguments to find a Anime_user_planned
     * @example
     * // Get one Anime_user_planned
     * const anime_user_planned = await prisma.anime_user_planned.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Anime_user_plannedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Anime_user_plannedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anime_user_planned'> extends True ? Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>> : Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T> | null, null>

    /**
     * Find the first Anime_user_planned that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedFindFirstOrThrowArgs} args - Arguments to find a Anime_user_planned
     * @example
     * // Get one Anime_user_planned
     * const anime_user_planned = await prisma.anime_user_planned.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Anime_user_plannedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Anime_user_plannedFindFirstOrThrowArgs>
    ): Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>>

    /**
     * Find zero or more Anime_user_planneds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anime_user_planneds
     * const anime_user_planneds = await prisma.anime_user_planned.findMany()
     * 
     * // Get first 10 Anime_user_planneds
     * const anime_user_planneds = await prisma.anime_user_planned.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anime_user_plannedWithIdOnly = await prisma.anime_user_planned.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Anime_user_plannedFindManyArgs>(
      args?: SelectSubset<T, Anime_user_plannedFindManyArgs>
    ): Prisma.PrismaPromise<Array<Anime_user_plannedGetPayload<T>>>

    /**
     * Create a Anime_user_planned.
     * @param {Anime_user_plannedCreateArgs} args - Arguments to create a Anime_user_planned.
     * @example
     * // Create one Anime_user_planned
     * const Anime_user_planned = await prisma.anime_user_planned.create({
     *   data: {
     *     // ... data to create a Anime_user_planned
     *   }
     * })
     * 
    **/
    create<T extends Anime_user_plannedCreateArgs>(
      args: SelectSubset<T, Anime_user_plannedCreateArgs>
    ): Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>>

    /**
     * Create many Anime_user_planneds.
     *     @param {Anime_user_plannedCreateManyArgs} args - Arguments to create many Anime_user_planneds.
     *     @example
     *     // Create many Anime_user_planneds
     *     const anime_user_planned = await prisma.anime_user_planned.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Anime_user_plannedCreateManyArgs>(
      args?: SelectSubset<T, Anime_user_plannedCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Anime_user_planned.
     * @param {Anime_user_plannedDeleteArgs} args - Arguments to delete one Anime_user_planned.
     * @example
     * // Delete one Anime_user_planned
     * const Anime_user_planned = await prisma.anime_user_planned.delete({
     *   where: {
     *     // ... filter to delete one Anime_user_planned
     *   }
     * })
     * 
    **/
    delete<T extends Anime_user_plannedDeleteArgs>(
      args: SelectSubset<T, Anime_user_plannedDeleteArgs>
    ): Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>>

    /**
     * Update one Anime_user_planned.
     * @param {Anime_user_plannedUpdateArgs} args - Arguments to update one Anime_user_planned.
     * @example
     * // Update one Anime_user_planned
     * const anime_user_planned = await prisma.anime_user_planned.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Anime_user_plannedUpdateArgs>(
      args: SelectSubset<T, Anime_user_plannedUpdateArgs>
    ): Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>>

    /**
     * Delete zero or more Anime_user_planneds.
     * @param {Anime_user_plannedDeleteManyArgs} args - Arguments to filter Anime_user_planneds to delete.
     * @example
     * // Delete a few Anime_user_planneds
     * const { count } = await prisma.anime_user_planned.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Anime_user_plannedDeleteManyArgs>(
      args?: SelectSubset<T, Anime_user_plannedDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anime_user_planneds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anime_user_planneds
     * const anime_user_planned = await prisma.anime_user_planned.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Anime_user_plannedUpdateManyArgs>(
      args: SelectSubset<T, Anime_user_plannedUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Anime_user_planned.
     * @param {Anime_user_plannedUpsertArgs} args - Arguments to update or create a Anime_user_planned.
     * @example
     * // Update or create a Anime_user_planned
     * const anime_user_planned = await prisma.anime_user_planned.upsert({
     *   create: {
     *     // ... data to create a Anime_user_planned
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anime_user_planned we want to update
     *   }
     * })
    **/
    upsert<T extends Anime_user_plannedUpsertArgs>(
      args: SelectSubset<T, Anime_user_plannedUpsertArgs>
    ): Prisma__Anime_user_plannedClient<Anime_user_plannedGetPayload<T>>

    /**
     * Count the number of Anime_user_planneds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedCountArgs} args - Arguments to filter Anime_user_planneds to count.
     * @example
     * // Count the number of Anime_user_planneds
     * const count = await prisma.anime_user_planned.count({
     *   where: {
     *     // ... the filter for the Anime_user_planneds we want to count
     *   }
     * })
    **/
    count<T extends Anime_user_plannedCountArgs>(
      args?: Subset<T, Anime_user_plannedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Anime_user_plannedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anime_user_planned.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Anime_user_plannedAggregateArgs>(args: Subset<T, Anime_user_plannedAggregateArgs>): Prisma.PrismaPromise<GetAnime_user_plannedAggregateType<T>>

    /**
     * Group by Anime_user_planned.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Anime_user_plannedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Anime_user_plannedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Anime_user_plannedGroupByArgs['orderBy'] }
        : { orderBy?: Anime_user_plannedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Anime_user_plannedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnime_user_plannedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Anime_user_planned.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Anime_user_plannedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    anime<T extends AnimeArgs= {}>(args?: Subset<T, AnimeArgs>): Prisma__AnimeClient<AnimeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Anime_user_planned base type for findUnique actions
   */
  export type Anime_user_plannedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * Filter, which Anime_user_planned to fetch.
     */
    where: Anime_user_plannedWhereUniqueInput
  }

  /**
   * Anime_user_planned findUnique
   */
  export interface Anime_user_plannedFindUniqueArgs extends Anime_user_plannedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime_user_planned findUniqueOrThrow
   */
  export type Anime_user_plannedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * Filter, which Anime_user_planned to fetch.
     */
    where: Anime_user_plannedWhereUniqueInput
  }


  /**
   * Anime_user_planned base type for findFirst actions
   */
  export type Anime_user_plannedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * Filter, which Anime_user_planned to fetch.
     */
    where?: Anime_user_plannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_planneds to fetch.
     */
    orderBy?: Enumerable<Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime_user_planneds.
     */
    cursor?: Anime_user_plannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_planneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_planneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime_user_planneds.
     */
    distinct?: Enumerable<Anime_user_plannedScalarFieldEnum>
  }

  /**
   * Anime_user_planned findFirst
   */
  export interface Anime_user_plannedFindFirstArgs extends Anime_user_plannedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anime_user_planned findFirstOrThrow
   */
  export type Anime_user_plannedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * Filter, which Anime_user_planned to fetch.
     */
    where?: Anime_user_plannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_planneds to fetch.
     */
    orderBy?: Enumerable<Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anime_user_planneds.
     */
    cursor?: Anime_user_plannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_planneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_planneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anime_user_planneds.
     */
    distinct?: Enumerable<Anime_user_plannedScalarFieldEnum>
  }


  /**
   * Anime_user_planned findMany
   */
  export type Anime_user_plannedFindManyArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * Filter, which Anime_user_planneds to fetch.
     */
    where?: Anime_user_plannedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anime_user_planneds to fetch.
     */
    orderBy?: Enumerable<Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anime_user_planneds.
     */
    cursor?: Anime_user_plannedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anime_user_planneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anime_user_planneds.
     */
    skip?: number
    distinct?: Enumerable<Anime_user_plannedScalarFieldEnum>
  }


  /**
   * Anime_user_planned create
   */
  export type Anime_user_plannedCreateArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * The data needed to create a Anime_user_planned.
     */
    data: XOR<Anime_user_plannedCreateInput, Anime_user_plannedUncheckedCreateInput>
  }


  /**
   * Anime_user_planned createMany
   */
  export type Anime_user_plannedCreateManyArgs = {
    /**
     * The data used to create many Anime_user_planneds.
     */
    data: Enumerable<Anime_user_plannedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Anime_user_planned update
   */
  export type Anime_user_plannedUpdateArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * The data needed to update a Anime_user_planned.
     */
    data: XOR<Anime_user_plannedUpdateInput, Anime_user_plannedUncheckedUpdateInput>
    /**
     * Choose, which Anime_user_planned to update.
     */
    where: Anime_user_plannedWhereUniqueInput
  }


  /**
   * Anime_user_planned updateMany
   */
  export type Anime_user_plannedUpdateManyArgs = {
    /**
     * The data used to update Anime_user_planneds.
     */
    data: XOR<Anime_user_plannedUpdateManyMutationInput, Anime_user_plannedUncheckedUpdateManyInput>
    /**
     * Filter which Anime_user_planneds to update
     */
    where?: Anime_user_plannedWhereInput
  }


  /**
   * Anime_user_planned upsert
   */
  export type Anime_user_plannedUpsertArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * The filter to search for the Anime_user_planned to update in case it exists.
     */
    where: Anime_user_plannedWhereUniqueInput
    /**
     * In case the Anime_user_planned found by the `where` argument doesn't exist, create a new Anime_user_planned with this data.
     */
    create: XOR<Anime_user_plannedCreateInput, Anime_user_plannedUncheckedCreateInput>
    /**
     * In case the Anime_user_planned was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Anime_user_plannedUpdateInput, Anime_user_plannedUncheckedUpdateInput>
  }


  /**
   * Anime_user_planned delete
   */
  export type Anime_user_plannedDeleteArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
    /**
     * Filter which Anime_user_planned to delete.
     */
    where: Anime_user_plannedWhereUniqueInput
  }


  /**
   * Anime_user_planned deleteMany
   */
  export type Anime_user_plannedDeleteManyArgs = {
    /**
     * Filter which Anime_user_planneds to delete
     */
    where?: Anime_user_plannedWhereInput
  }


  /**
   * Anime_user_planned without action
   */
  export type Anime_user_plannedArgs = {
    /**
     * Select specific fields to fetch from the Anime_user_planned
     */
    select?: Anime_user_plannedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Anime_user_plannedInclude | null
  }



  /**
   * Model Monthly_planner
   */


  export type AggregateMonthly_planner = {
    _count: Monthly_plannerCountAggregateOutputType | null
    _avg: Monthly_plannerAvgAggregateOutputType | null
    _sum: Monthly_plannerSumAggregateOutputType | null
    _min: Monthly_plannerMinAggregateOutputType | null
    _max: Monthly_plannerMaxAggregateOutputType | null
  }

  export type Monthly_plannerAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Monthly_plannerSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Monthly_plannerMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    month: string | null
    year: string | null
    notes: string | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Monthly_plannerMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    month: string | null
    year: string | null
    notes: string | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Monthly_plannerCountAggregateOutputType = {
    id: number
    user_id: number
    month: number
    year: number
    notes: number
    created_at: number
    modified_at: number
    _all: number
  }


  export type Monthly_plannerAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Monthly_plannerSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Monthly_plannerMinAggregateInputType = {
    id?: true
    user_id?: true
    month?: true
    year?: true
    notes?: true
    created_at?: true
    modified_at?: true
  }

  export type Monthly_plannerMaxAggregateInputType = {
    id?: true
    user_id?: true
    month?: true
    year?: true
    notes?: true
    created_at?: true
    modified_at?: true
  }

  export type Monthly_plannerCountAggregateInputType = {
    id?: true
    user_id?: true
    month?: true
    year?: true
    notes?: true
    created_at?: true
    modified_at?: true
    _all?: true
  }

  export type Monthly_plannerAggregateArgs = {
    /**
     * Filter which Monthly_planner to aggregate.
     */
    where?: Monthly_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_planners to fetch.
     */
    orderBy?: Enumerable<Monthly_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Monthly_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_planners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Monthly_planners
    **/
    _count?: true | Monthly_plannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Monthly_plannerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Monthly_plannerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Monthly_plannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Monthly_plannerMaxAggregateInputType
  }

  export type GetMonthly_plannerAggregateType<T extends Monthly_plannerAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthly_planner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthly_planner[P]>
      : GetScalarType<T[P], AggregateMonthly_planner[P]>
  }




  export type Monthly_plannerGroupByArgs = {
    where?: Monthly_plannerWhereInput
    orderBy?: Enumerable<Monthly_plannerOrderByWithAggregationInput>
    by: Monthly_plannerScalarFieldEnum[]
    having?: Monthly_plannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Monthly_plannerCountAggregateInputType | true
    _avg?: Monthly_plannerAvgAggregateInputType
    _sum?: Monthly_plannerSumAggregateInputType
    _min?: Monthly_plannerMinAggregateInputType
    _max?: Monthly_plannerMaxAggregateInputType
  }


  export type Monthly_plannerGroupByOutputType = {
    id: number
    user_id: number
    month: string
    year: string
    notes: string
    created_at: Date
    modified_at: Date
    _count: Monthly_plannerCountAggregateOutputType | null
    _avg: Monthly_plannerAvgAggregateOutputType | null
    _sum: Monthly_plannerSumAggregateOutputType | null
    _min: Monthly_plannerMinAggregateOutputType | null
    _max: Monthly_plannerMaxAggregateOutputType | null
  }

  type GetMonthly_plannerGroupByPayload<T extends Monthly_plannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Monthly_plannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Monthly_plannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Monthly_plannerGroupByOutputType[P]>
            : GetScalarType<T[P], Monthly_plannerGroupByOutputType[P]>
        }
      >
    >


  export type Monthly_plannerSelect = {
    id?: boolean
    user_id?: boolean
    month?: boolean
    year?: boolean
    notes?: boolean
    created_at?: boolean
    modified_at?: boolean
    User?: boolean | UserArgs
    to_do_list?: boolean | Monthly_planner$to_do_listArgs
    daily_planner?: boolean | Monthly_planner$daily_plannerArgs
    _count?: boolean | Monthly_plannerCountOutputTypeArgs
  }


  export type Monthly_plannerInclude = {
    User?: boolean | UserArgs
    to_do_list?: boolean | Monthly_planner$to_do_listArgs
    daily_planner?: boolean | Monthly_planner$daily_plannerArgs
    _count?: boolean | Monthly_plannerCountOutputTypeArgs
  }

  export type Monthly_plannerGetPayload<S extends boolean | null | undefined | Monthly_plannerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Monthly_planner :
    S extends undefined ? never :
    S extends { include: any } & (Monthly_plannerArgs | Monthly_plannerFindManyArgs)
    ? Monthly_planner  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'to_do_list' ? Array < Monthly_to_do_listGetPayload<S['include'][P]>>  :
        P extends 'daily_planner' ? Array < Daily_plannerGetPayload<S['include'][P]>>  :
        P extends '_count' ? Monthly_plannerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Monthly_plannerArgs | Monthly_plannerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'to_do_list' ? Array < Monthly_to_do_listGetPayload<S['select'][P]>>  :
        P extends 'daily_planner' ? Array < Daily_plannerGetPayload<S['select'][P]>>  :
        P extends '_count' ? Monthly_plannerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Monthly_planner ? Monthly_planner[P] : never
  } 
      : Monthly_planner


  type Monthly_plannerCountArgs = 
    Omit<Monthly_plannerFindManyArgs, 'select' | 'include'> & {
      select?: Monthly_plannerCountAggregateInputType | true
    }

  export interface Monthly_plannerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Monthly_planner that matches the filter.
     * @param {Monthly_plannerFindUniqueArgs} args - Arguments to find a Monthly_planner
     * @example
     * // Get one Monthly_planner
     * const monthly_planner = await prisma.monthly_planner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Monthly_plannerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Monthly_plannerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Monthly_planner'> extends True ? Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>> : Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T> | null, null>

    /**
     * Find one Monthly_planner that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Monthly_plannerFindUniqueOrThrowArgs} args - Arguments to find a Monthly_planner
     * @example
     * // Get one Monthly_planner
     * const monthly_planner = await prisma.monthly_planner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Monthly_plannerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Monthly_plannerFindUniqueOrThrowArgs>
    ): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>>

    /**
     * Find the first Monthly_planner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerFindFirstArgs} args - Arguments to find a Monthly_planner
     * @example
     * // Get one Monthly_planner
     * const monthly_planner = await prisma.monthly_planner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Monthly_plannerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Monthly_plannerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Monthly_planner'> extends True ? Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>> : Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T> | null, null>

    /**
     * Find the first Monthly_planner that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerFindFirstOrThrowArgs} args - Arguments to find a Monthly_planner
     * @example
     * // Get one Monthly_planner
     * const monthly_planner = await prisma.monthly_planner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Monthly_plannerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Monthly_plannerFindFirstOrThrowArgs>
    ): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>>

    /**
     * Find zero or more Monthly_planners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Monthly_planners
     * const monthly_planners = await prisma.monthly_planner.findMany()
     * 
     * // Get first 10 Monthly_planners
     * const monthly_planners = await prisma.monthly_planner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthly_plannerWithIdOnly = await prisma.monthly_planner.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Monthly_plannerFindManyArgs>(
      args?: SelectSubset<T, Monthly_plannerFindManyArgs>
    ): Prisma.PrismaPromise<Array<Monthly_plannerGetPayload<T>>>

    /**
     * Create a Monthly_planner.
     * @param {Monthly_plannerCreateArgs} args - Arguments to create a Monthly_planner.
     * @example
     * // Create one Monthly_planner
     * const Monthly_planner = await prisma.monthly_planner.create({
     *   data: {
     *     // ... data to create a Monthly_planner
     *   }
     * })
     * 
    **/
    create<T extends Monthly_plannerCreateArgs>(
      args: SelectSubset<T, Monthly_plannerCreateArgs>
    ): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>>

    /**
     * Create many Monthly_planners.
     *     @param {Monthly_plannerCreateManyArgs} args - Arguments to create many Monthly_planners.
     *     @example
     *     // Create many Monthly_planners
     *     const monthly_planner = await prisma.monthly_planner.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Monthly_plannerCreateManyArgs>(
      args?: SelectSubset<T, Monthly_plannerCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Monthly_planner.
     * @param {Monthly_plannerDeleteArgs} args - Arguments to delete one Monthly_planner.
     * @example
     * // Delete one Monthly_planner
     * const Monthly_planner = await prisma.monthly_planner.delete({
     *   where: {
     *     // ... filter to delete one Monthly_planner
     *   }
     * })
     * 
    **/
    delete<T extends Monthly_plannerDeleteArgs>(
      args: SelectSubset<T, Monthly_plannerDeleteArgs>
    ): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>>

    /**
     * Update one Monthly_planner.
     * @param {Monthly_plannerUpdateArgs} args - Arguments to update one Monthly_planner.
     * @example
     * // Update one Monthly_planner
     * const monthly_planner = await prisma.monthly_planner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Monthly_plannerUpdateArgs>(
      args: SelectSubset<T, Monthly_plannerUpdateArgs>
    ): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>>

    /**
     * Delete zero or more Monthly_planners.
     * @param {Monthly_plannerDeleteManyArgs} args - Arguments to filter Monthly_planners to delete.
     * @example
     * // Delete a few Monthly_planners
     * const { count } = await prisma.monthly_planner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Monthly_plannerDeleteManyArgs>(
      args?: SelectSubset<T, Monthly_plannerDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monthly_planners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Monthly_planners
     * const monthly_planner = await prisma.monthly_planner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Monthly_plannerUpdateManyArgs>(
      args: SelectSubset<T, Monthly_plannerUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Monthly_planner.
     * @param {Monthly_plannerUpsertArgs} args - Arguments to update or create a Monthly_planner.
     * @example
     * // Update or create a Monthly_planner
     * const monthly_planner = await prisma.monthly_planner.upsert({
     *   create: {
     *     // ... data to create a Monthly_planner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Monthly_planner we want to update
     *   }
     * })
    **/
    upsert<T extends Monthly_plannerUpsertArgs>(
      args: SelectSubset<T, Monthly_plannerUpsertArgs>
    ): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T>>

    /**
     * Count the number of Monthly_planners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerCountArgs} args - Arguments to filter Monthly_planners to count.
     * @example
     * // Count the number of Monthly_planners
     * const count = await prisma.monthly_planner.count({
     *   where: {
     *     // ... the filter for the Monthly_planners we want to count
     *   }
     * })
    **/
    count<T extends Monthly_plannerCountArgs>(
      args?: Subset<T, Monthly_plannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Monthly_plannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Monthly_planner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Monthly_plannerAggregateArgs>(args: Subset<T, Monthly_plannerAggregateArgs>): Prisma.PrismaPromise<GetMonthly_plannerAggregateType<T>>

    /**
     * Group by Monthly_planner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_plannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Monthly_plannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Monthly_plannerGroupByArgs['orderBy'] }
        : { orderBy?: Monthly_plannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Monthly_plannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthly_plannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Monthly_planner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Monthly_plannerClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    to_do_list<T extends Monthly_planner$to_do_listArgs= {}>(args?: Subset<T, Monthly_planner$to_do_listArgs>): Prisma.PrismaPromise<Array<Monthly_to_do_listGetPayload<T>>| Null>;

    daily_planner<T extends Monthly_planner$daily_plannerArgs= {}>(args?: Subset<T, Monthly_planner$daily_plannerArgs>): Prisma.PrismaPromise<Array<Daily_plannerGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Monthly_planner base type for findUnique actions
   */
  export type Monthly_plannerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * Filter, which Monthly_planner to fetch.
     */
    where: Monthly_plannerWhereUniqueInput
  }

  /**
   * Monthly_planner findUnique
   */
  export interface Monthly_plannerFindUniqueArgs extends Monthly_plannerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Monthly_planner findUniqueOrThrow
   */
  export type Monthly_plannerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * Filter, which Monthly_planner to fetch.
     */
    where: Monthly_plannerWhereUniqueInput
  }


  /**
   * Monthly_planner base type for findFirst actions
   */
  export type Monthly_plannerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * Filter, which Monthly_planner to fetch.
     */
    where?: Monthly_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_planners to fetch.
     */
    orderBy?: Enumerable<Monthly_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monthly_planners.
     */
    cursor?: Monthly_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_planners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monthly_planners.
     */
    distinct?: Enumerable<Monthly_plannerScalarFieldEnum>
  }

  /**
   * Monthly_planner findFirst
   */
  export interface Monthly_plannerFindFirstArgs extends Monthly_plannerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Monthly_planner findFirstOrThrow
   */
  export type Monthly_plannerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * Filter, which Monthly_planner to fetch.
     */
    where?: Monthly_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_planners to fetch.
     */
    orderBy?: Enumerable<Monthly_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monthly_planners.
     */
    cursor?: Monthly_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_planners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monthly_planners.
     */
    distinct?: Enumerable<Monthly_plannerScalarFieldEnum>
  }


  /**
   * Monthly_planner findMany
   */
  export type Monthly_plannerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * Filter, which Monthly_planners to fetch.
     */
    where?: Monthly_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_planners to fetch.
     */
    orderBy?: Enumerable<Monthly_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Monthly_planners.
     */
    cursor?: Monthly_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_planners.
     */
    skip?: number
    distinct?: Enumerable<Monthly_plannerScalarFieldEnum>
  }


  /**
   * Monthly_planner create
   */
  export type Monthly_plannerCreateArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * The data needed to create a Monthly_planner.
     */
    data: XOR<Monthly_plannerCreateInput, Monthly_plannerUncheckedCreateInput>
  }


  /**
   * Monthly_planner createMany
   */
  export type Monthly_plannerCreateManyArgs = {
    /**
     * The data used to create many Monthly_planners.
     */
    data: Enumerable<Monthly_plannerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Monthly_planner update
   */
  export type Monthly_plannerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * The data needed to update a Monthly_planner.
     */
    data: XOR<Monthly_plannerUpdateInput, Monthly_plannerUncheckedUpdateInput>
    /**
     * Choose, which Monthly_planner to update.
     */
    where: Monthly_plannerWhereUniqueInput
  }


  /**
   * Monthly_planner updateMany
   */
  export type Monthly_plannerUpdateManyArgs = {
    /**
     * The data used to update Monthly_planners.
     */
    data: XOR<Monthly_plannerUpdateManyMutationInput, Monthly_plannerUncheckedUpdateManyInput>
    /**
     * Filter which Monthly_planners to update
     */
    where?: Monthly_plannerWhereInput
  }


  /**
   * Monthly_planner upsert
   */
  export type Monthly_plannerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * The filter to search for the Monthly_planner to update in case it exists.
     */
    where: Monthly_plannerWhereUniqueInput
    /**
     * In case the Monthly_planner found by the `where` argument doesn't exist, create a new Monthly_planner with this data.
     */
    create: XOR<Monthly_plannerCreateInput, Monthly_plannerUncheckedCreateInput>
    /**
     * In case the Monthly_planner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Monthly_plannerUpdateInput, Monthly_plannerUncheckedUpdateInput>
  }


  /**
   * Monthly_planner delete
   */
  export type Monthly_plannerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
    /**
     * Filter which Monthly_planner to delete.
     */
    where: Monthly_plannerWhereUniqueInput
  }


  /**
   * Monthly_planner deleteMany
   */
  export type Monthly_plannerDeleteManyArgs = {
    /**
     * Filter which Monthly_planners to delete
     */
    where?: Monthly_plannerWhereInput
  }


  /**
   * Monthly_planner.to_do_list
   */
  export type Monthly_planner$to_do_listArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    where?: Monthly_to_do_listWhereInput
    orderBy?: Enumerable<Monthly_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Monthly_to_do_listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Monthly_to_do_listScalarFieldEnum>
  }


  /**
   * Monthly_planner.daily_planner
   */
  export type Monthly_planner$daily_plannerArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    where?: Daily_plannerWhereInput
    orderBy?: Enumerable<Daily_plannerOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Daily_plannerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Daily_plannerScalarFieldEnum>
  }


  /**
   * Monthly_planner without action
   */
  export type Monthly_plannerArgs = {
    /**
     * Select specific fields to fetch from the Monthly_planner
     */
    select?: Monthly_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_plannerInclude | null
  }



  /**
   * Model Monthly_to_do_list
   */


  export type AggregateMonthly_to_do_list = {
    _count: Monthly_to_do_listCountAggregateOutputType | null
    _avg: Monthly_to_do_listAvgAggregateOutputType | null
    _sum: Monthly_to_do_listSumAggregateOutputType | null
    _min: Monthly_to_do_listMinAggregateOutputType | null
    _max: Monthly_to_do_listMaxAggregateOutputType | null
  }

  export type Monthly_to_do_listAvgAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
  }

  export type Monthly_to_do_listSumAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
  }

  export type Monthly_to_do_listMinAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
    data: string | null
  }

  export type Monthly_to_do_listMaxAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
    data: string | null
  }

  export type Monthly_to_do_listCountAggregateOutputType = {
    id: number
    monthly_planner_id: number
    data: number
    _all: number
  }


  export type Monthly_to_do_listAvgAggregateInputType = {
    id?: true
    monthly_planner_id?: true
  }

  export type Monthly_to_do_listSumAggregateInputType = {
    id?: true
    monthly_planner_id?: true
  }

  export type Monthly_to_do_listMinAggregateInputType = {
    id?: true
    monthly_planner_id?: true
    data?: true
  }

  export type Monthly_to_do_listMaxAggregateInputType = {
    id?: true
    monthly_planner_id?: true
    data?: true
  }

  export type Monthly_to_do_listCountAggregateInputType = {
    id?: true
    monthly_planner_id?: true
    data?: true
    _all?: true
  }

  export type Monthly_to_do_listAggregateArgs = {
    /**
     * Filter which Monthly_to_do_list to aggregate.
     */
    where?: Monthly_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Monthly_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Monthly_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_to_do_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Monthly_to_do_lists
    **/
    _count?: true | Monthly_to_do_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Monthly_to_do_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Monthly_to_do_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Monthly_to_do_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Monthly_to_do_listMaxAggregateInputType
  }

  export type GetMonthly_to_do_listAggregateType<T extends Monthly_to_do_listAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthly_to_do_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthly_to_do_list[P]>
      : GetScalarType<T[P], AggregateMonthly_to_do_list[P]>
  }




  export type Monthly_to_do_listGroupByArgs = {
    where?: Monthly_to_do_listWhereInput
    orderBy?: Enumerable<Monthly_to_do_listOrderByWithAggregationInput>
    by: Monthly_to_do_listScalarFieldEnum[]
    having?: Monthly_to_do_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Monthly_to_do_listCountAggregateInputType | true
    _avg?: Monthly_to_do_listAvgAggregateInputType
    _sum?: Monthly_to_do_listSumAggregateInputType
    _min?: Monthly_to_do_listMinAggregateInputType
    _max?: Monthly_to_do_listMaxAggregateInputType
  }


  export type Monthly_to_do_listGroupByOutputType = {
    id: number
    monthly_planner_id: number
    data: string
    _count: Monthly_to_do_listCountAggregateOutputType | null
    _avg: Monthly_to_do_listAvgAggregateOutputType | null
    _sum: Monthly_to_do_listSumAggregateOutputType | null
    _min: Monthly_to_do_listMinAggregateOutputType | null
    _max: Monthly_to_do_listMaxAggregateOutputType | null
  }

  type GetMonthly_to_do_listGroupByPayload<T extends Monthly_to_do_listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Monthly_to_do_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Monthly_to_do_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Monthly_to_do_listGroupByOutputType[P]>
            : GetScalarType<T[P], Monthly_to_do_listGroupByOutputType[P]>
        }
      >
    >


  export type Monthly_to_do_listSelect = {
    id?: boolean
    monthly_planner_id?: boolean
    data?: boolean
    Monthly_planner?: boolean | Monthly_plannerArgs
  }


  export type Monthly_to_do_listInclude = {
    Monthly_planner?: boolean | Monthly_plannerArgs
  }

  export type Monthly_to_do_listGetPayload<S extends boolean | null | undefined | Monthly_to_do_listArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Monthly_to_do_list :
    S extends undefined ? never :
    S extends { include: any } & (Monthly_to_do_listArgs | Monthly_to_do_listFindManyArgs)
    ? Monthly_to_do_list  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Monthly_planner' ? Monthly_plannerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Monthly_to_do_listArgs | Monthly_to_do_listFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Monthly_planner' ? Monthly_plannerGetPayload<S['select'][P]> :  P extends keyof Monthly_to_do_list ? Monthly_to_do_list[P] : never
  } 
      : Monthly_to_do_list


  type Monthly_to_do_listCountArgs = 
    Omit<Monthly_to_do_listFindManyArgs, 'select' | 'include'> & {
      select?: Monthly_to_do_listCountAggregateInputType | true
    }

  export interface Monthly_to_do_listDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Monthly_to_do_list that matches the filter.
     * @param {Monthly_to_do_listFindUniqueArgs} args - Arguments to find a Monthly_to_do_list
     * @example
     * // Get one Monthly_to_do_list
     * const monthly_to_do_list = await prisma.monthly_to_do_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Monthly_to_do_listFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Monthly_to_do_listFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Monthly_to_do_list'> extends True ? Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>> : Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T> | null, null>

    /**
     * Find one Monthly_to_do_list that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Monthly_to_do_listFindUniqueOrThrowArgs} args - Arguments to find a Monthly_to_do_list
     * @example
     * // Get one Monthly_to_do_list
     * const monthly_to_do_list = await prisma.monthly_to_do_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Monthly_to_do_listFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Monthly_to_do_listFindUniqueOrThrowArgs>
    ): Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>>

    /**
     * Find the first Monthly_to_do_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listFindFirstArgs} args - Arguments to find a Monthly_to_do_list
     * @example
     * // Get one Monthly_to_do_list
     * const monthly_to_do_list = await prisma.monthly_to_do_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Monthly_to_do_listFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Monthly_to_do_listFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Monthly_to_do_list'> extends True ? Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>> : Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T> | null, null>

    /**
     * Find the first Monthly_to_do_list that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listFindFirstOrThrowArgs} args - Arguments to find a Monthly_to_do_list
     * @example
     * // Get one Monthly_to_do_list
     * const monthly_to_do_list = await prisma.monthly_to_do_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Monthly_to_do_listFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Monthly_to_do_listFindFirstOrThrowArgs>
    ): Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>>

    /**
     * Find zero or more Monthly_to_do_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Monthly_to_do_lists
     * const monthly_to_do_lists = await prisma.monthly_to_do_list.findMany()
     * 
     * // Get first 10 Monthly_to_do_lists
     * const monthly_to_do_lists = await prisma.monthly_to_do_list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthly_to_do_listWithIdOnly = await prisma.monthly_to_do_list.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Monthly_to_do_listFindManyArgs>(
      args?: SelectSubset<T, Monthly_to_do_listFindManyArgs>
    ): Prisma.PrismaPromise<Array<Monthly_to_do_listGetPayload<T>>>

    /**
     * Create a Monthly_to_do_list.
     * @param {Monthly_to_do_listCreateArgs} args - Arguments to create a Monthly_to_do_list.
     * @example
     * // Create one Monthly_to_do_list
     * const Monthly_to_do_list = await prisma.monthly_to_do_list.create({
     *   data: {
     *     // ... data to create a Monthly_to_do_list
     *   }
     * })
     * 
    **/
    create<T extends Monthly_to_do_listCreateArgs>(
      args: SelectSubset<T, Monthly_to_do_listCreateArgs>
    ): Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>>

    /**
     * Create many Monthly_to_do_lists.
     *     @param {Monthly_to_do_listCreateManyArgs} args - Arguments to create many Monthly_to_do_lists.
     *     @example
     *     // Create many Monthly_to_do_lists
     *     const monthly_to_do_list = await prisma.monthly_to_do_list.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Monthly_to_do_listCreateManyArgs>(
      args?: SelectSubset<T, Monthly_to_do_listCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Monthly_to_do_list.
     * @param {Monthly_to_do_listDeleteArgs} args - Arguments to delete one Monthly_to_do_list.
     * @example
     * // Delete one Monthly_to_do_list
     * const Monthly_to_do_list = await prisma.monthly_to_do_list.delete({
     *   where: {
     *     // ... filter to delete one Monthly_to_do_list
     *   }
     * })
     * 
    **/
    delete<T extends Monthly_to_do_listDeleteArgs>(
      args: SelectSubset<T, Monthly_to_do_listDeleteArgs>
    ): Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>>

    /**
     * Update one Monthly_to_do_list.
     * @param {Monthly_to_do_listUpdateArgs} args - Arguments to update one Monthly_to_do_list.
     * @example
     * // Update one Monthly_to_do_list
     * const monthly_to_do_list = await prisma.monthly_to_do_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Monthly_to_do_listUpdateArgs>(
      args: SelectSubset<T, Monthly_to_do_listUpdateArgs>
    ): Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>>

    /**
     * Delete zero or more Monthly_to_do_lists.
     * @param {Monthly_to_do_listDeleteManyArgs} args - Arguments to filter Monthly_to_do_lists to delete.
     * @example
     * // Delete a few Monthly_to_do_lists
     * const { count } = await prisma.monthly_to_do_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Monthly_to_do_listDeleteManyArgs>(
      args?: SelectSubset<T, Monthly_to_do_listDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monthly_to_do_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Monthly_to_do_lists
     * const monthly_to_do_list = await prisma.monthly_to_do_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Monthly_to_do_listUpdateManyArgs>(
      args: SelectSubset<T, Monthly_to_do_listUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Monthly_to_do_list.
     * @param {Monthly_to_do_listUpsertArgs} args - Arguments to update or create a Monthly_to_do_list.
     * @example
     * // Update or create a Monthly_to_do_list
     * const monthly_to_do_list = await prisma.monthly_to_do_list.upsert({
     *   create: {
     *     // ... data to create a Monthly_to_do_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Monthly_to_do_list we want to update
     *   }
     * })
    **/
    upsert<T extends Monthly_to_do_listUpsertArgs>(
      args: SelectSubset<T, Monthly_to_do_listUpsertArgs>
    ): Prisma__Monthly_to_do_listClient<Monthly_to_do_listGetPayload<T>>

    /**
     * Count the number of Monthly_to_do_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listCountArgs} args - Arguments to filter Monthly_to_do_lists to count.
     * @example
     * // Count the number of Monthly_to_do_lists
     * const count = await prisma.monthly_to_do_list.count({
     *   where: {
     *     // ... the filter for the Monthly_to_do_lists we want to count
     *   }
     * })
    **/
    count<T extends Monthly_to_do_listCountArgs>(
      args?: Subset<T, Monthly_to_do_listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Monthly_to_do_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Monthly_to_do_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Monthly_to_do_listAggregateArgs>(args: Subset<T, Monthly_to_do_listAggregateArgs>): Prisma.PrismaPromise<GetMonthly_to_do_listAggregateType<T>>

    /**
     * Group by Monthly_to_do_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_to_do_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Monthly_to_do_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Monthly_to_do_listGroupByArgs['orderBy'] }
        : { orderBy?: Monthly_to_do_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Monthly_to_do_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthly_to_do_listGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Monthly_to_do_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Monthly_to_do_listClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Monthly_planner<T extends Monthly_plannerArgs= {}>(args?: Subset<T, Monthly_plannerArgs>): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Monthly_to_do_list base type for findUnique actions
   */
  export type Monthly_to_do_listFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * Filter, which Monthly_to_do_list to fetch.
     */
    where: Monthly_to_do_listWhereUniqueInput
  }

  /**
   * Monthly_to_do_list findUnique
   */
  export interface Monthly_to_do_listFindUniqueArgs extends Monthly_to_do_listFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Monthly_to_do_list findUniqueOrThrow
   */
  export type Monthly_to_do_listFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * Filter, which Monthly_to_do_list to fetch.
     */
    where: Monthly_to_do_listWhereUniqueInput
  }


  /**
   * Monthly_to_do_list base type for findFirst actions
   */
  export type Monthly_to_do_listFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * Filter, which Monthly_to_do_list to fetch.
     */
    where?: Monthly_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Monthly_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monthly_to_do_lists.
     */
    cursor?: Monthly_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_to_do_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monthly_to_do_lists.
     */
    distinct?: Enumerable<Monthly_to_do_listScalarFieldEnum>
  }

  /**
   * Monthly_to_do_list findFirst
   */
  export interface Monthly_to_do_listFindFirstArgs extends Monthly_to_do_listFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Monthly_to_do_list findFirstOrThrow
   */
  export type Monthly_to_do_listFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * Filter, which Monthly_to_do_list to fetch.
     */
    where?: Monthly_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Monthly_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monthly_to_do_lists.
     */
    cursor?: Monthly_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_to_do_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monthly_to_do_lists.
     */
    distinct?: Enumerable<Monthly_to_do_listScalarFieldEnum>
  }


  /**
   * Monthly_to_do_list findMany
   */
  export type Monthly_to_do_listFindManyArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * Filter, which Monthly_to_do_lists to fetch.
     */
    where?: Monthly_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monthly_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Monthly_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Monthly_to_do_lists.
     */
    cursor?: Monthly_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monthly_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monthly_to_do_lists.
     */
    skip?: number
    distinct?: Enumerable<Monthly_to_do_listScalarFieldEnum>
  }


  /**
   * Monthly_to_do_list create
   */
  export type Monthly_to_do_listCreateArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * The data needed to create a Monthly_to_do_list.
     */
    data: XOR<Monthly_to_do_listCreateInput, Monthly_to_do_listUncheckedCreateInput>
  }


  /**
   * Monthly_to_do_list createMany
   */
  export type Monthly_to_do_listCreateManyArgs = {
    /**
     * The data used to create many Monthly_to_do_lists.
     */
    data: Enumerable<Monthly_to_do_listCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Monthly_to_do_list update
   */
  export type Monthly_to_do_listUpdateArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * The data needed to update a Monthly_to_do_list.
     */
    data: XOR<Monthly_to_do_listUpdateInput, Monthly_to_do_listUncheckedUpdateInput>
    /**
     * Choose, which Monthly_to_do_list to update.
     */
    where: Monthly_to_do_listWhereUniqueInput
  }


  /**
   * Monthly_to_do_list updateMany
   */
  export type Monthly_to_do_listUpdateManyArgs = {
    /**
     * The data used to update Monthly_to_do_lists.
     */
    data: XOR<Monthly_to_do_listUpdateManyMutationInput, Monthly_to_do_listUncheckedUpdateManyInput>
    /**
     * Filter which Monthly_to_do_lists to update
     */
    where?: Monthly_to_do_listWhereInput
  }


  /**
   * Monthly_to_do_list upsert
   */
  export type Monthly_to_do_listUpsertArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * The filter to search for the Monthly_to_do_list to update in case it exists.
     */
    where: Monthly_to_do_listWhereUniqueInput
    /**
     * In case the Monthly_to_do_list found by the `where` argument doesn't exist, create a new Monthly_to_do_list with this data.
     */
    create: XOR<Monthly_to_do_listCreateInput, Monthly_to_do_listUncheckedCreateInput>
    /**
     * In case the Monthly_to_do_list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Monthly_to_do_listUpdateInput, Monthly_to_do_listUncheckedUpdateInput>
  }


  /**
   * Monthly_to_do_list delete
   */
  export type Monthly_to_do_listDeleteArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
    /**
     * Filter which Monthly_to_do_list to delete.
     */
    where: Monthly_to_do_listWhereUniqueInput
  }


  /**
   * Monthly_to_do_list deleteMany
   */
  export type Monthly_to_do_listDeleteManyArgs = {
    /**
     * Filter which Monthly_to_do_lists to delete
     */
    where?: Monthly_to_do_listWhereInput
  }


  /**
   * Monthly_to_do_list without action
   */
  export type Monthly_to_do_listArgs = {
    /**
     * Select specific fields to fetch from the Monthly_to_do_list
     */
    select?: Monthly_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Monthly_to_do_listInclude | null
  }



  /**
   * Model Daily_planner
   */


  export type AggregateDaily_planner = {
    _count: Daily_plannerCountAggregateOutputType | null
    _avg: Daily_plannerAvgAggregateOutputType | null
    _sum: Daily_plannerSumAggregateOutputType | null
    _min: Daily_plannerMinAggregateOutputType | null
    _max: Daily_plannerMaxAggregateOutputType | null
  }

  export type Daily_plannerAvgAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
  }

  export type Daily_plannerSumAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
  }

  export type Daily_plannerMinAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
    day: string | null
    weekday: string | null
    notes: string | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Daily_plannerMaxAggregateOutputType = {
    id: number | null
    monthly_planner_id: number | null
    day: string | null
    weekday: string | null
    notes: string | null
    created_at: Date | null
    modified_at: Date | null
  }

  export type Daily_plannerCountAggregateOutputType = {
    id: number
    monthly_planner_id: number
    day: number
    weekday: number
    notes: number
    created_at: number
    modified_at: number
    _all: number
  }


  export type Daily_plannerAvgAggregateInputType = {
    id?: true
    monthly_planner_id?: true
  }

  export type Daily_plannerSumAggregateInputType = {
    id?: true
    monthly_planner_id?: true
  }

  export type Daily_plannerMinAggregateInputType = {
    id?: true
    monthly_planner_id?: true
    day?: true
    weekday?: true
    notes?: true
    created_at?: true
    modified_at?: true
  }

  export type Daily_plannerMaxAggregateInputType = {
    id?: true
    monthly_planner_id?: true
    day?: true
    weekday?: true
    notes?: true
    created_at?: true
    modified_at?: true
  }

  export type Daily_plannerCountAggregateInputType = {
    id?: true
    monthly_planner_id?: true
    day?: true
    weekday?: true
    notes?: true
    created_at?: true
    modified_at?: true
    _all?: true
  }

  export type Daily_plannerAggregateArgs = {
    /**
     * Filter which Daily_planner to aggregate.
     */
    where?: Daily_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_planners to fetch.
     */
    orderBy?: Enumerable<Daily_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Daily_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_planners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Daily_planners
    **/
    _count?: true | Daily_plannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Daily_plannerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Daily_plannerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Daily_plannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Daily_plannerMaxAggregateInputType
  }

  export type GetDaily_plannerAggregateType<T extends Daily_plannerAggregateArgs> = {
        [P in keyof T & keyof AggregateDaily_planner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaily_planner[P]>
      : GetScalarType<T[P], AggregateDaily_planner[P]>
  }




  export type Daily_plannerGroupByArgs = {
    where?: Daily_plannerWhereInput
    orderBy?: Enumerable<Daily_plannerOrderByWithAggregationInput>
    by: Daily_plannerScalarFieldEnum[]
    having?: Daily_plannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Daily_plannerCountAggregateInputType | true
    _avg?: Daily_plannerAvgAggregateInputType
    _sum?: Daily_plannerSumAggregateInputType
    _min?: Daily_plannerMinAggregateInputType
    _max?: Daily_plannerMaxAggregateInputType
  }


  export type Daily_plannerGroupByOutputType = {
    id: number
    monthly_planner_id: number
    day: string
    weekday: string
    notes: string
    created_at: Date
    modified_at: Date
    _count: Daily_plannerCountAggregateOutputType | null
    _avg: Daily_plannerAvgAggregateOutputType | null
    _sum: Daily_plannerSumAggregateOutputType | null
    _min: Daily_plannerMinAggregateOutputType | null
    _max: Daily_plannerMaxAggregateOutputType | null
  }

  type GetDaily_plannerGroupByPayload<T extends Daily_plannerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Daily_plannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Daily_plannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Daily_plannerGroupByOutputType[P]>
            : GetScalarType<T[P], Daily_plannerGroupByOutputType[P]>
        }
      >
    >


  export type Daily_plannerSelect = {
    id?: boolean
    monthly_planner_id?: boolean
    day?: boolean
    weekday?: boolean
    notes?: boolean
    created_at?: boolean
    modified_at?: boolean
    Monthly_planner?: boolean | Monthly_plannerArgs
    to_do_list?: boolean | Daily_planner$to_do_listArgs
    most_important?: boolean | Daily_planner$most_importantArgs
    _count?: boolean | Daily_plannerCountOutputTypeArgs
  }


  export type Daily_plannerInclude = {
    Monthly_planner?: boolean | Monthly_plannerArgs
    to_do_list?: boolean | Daily_planner$to_do_listArgs
    most_important?: boolean | Daily_planner$most_importantArgs
    _count?: boolean | Daily_plannerCountOutputTypeArgs
  }

  export type Daily_plannerGetPayload<S extends boolean | null | undefined | Daily_plannerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Daily_planner :
    S extends undefined ? never :
    S extends { include: any } & (Daily_plannerArgs | Daily_plannerFindManyArgs)
    ? Daily_planner  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Monthly_planner' ? Monthly_plannerGetPayload<S['include'][P]> :
        P extends 'to_do_list' ? Array < Daily_to_do_listGetPayload<S['include'][P]>>  :
        P extends 'most_important' ? Array < Daily_most_importantGetPayload<S['include'][P]>>  :
        P extends '_count' ? Daily_plannerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Daily_plannerArgs | Daily_plannerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Monthly_planner' ? Monthly_plannerGetPayload<S['select'][P]> :
        P extends 'to_do_list' ? Array < Daily_to_do_listGetPayload<S['select'][P]>>  :
        P extends 'most_important' ? Array < Daily_most_importantGetPayload<S['select'][P]>>  :
        P extends '_count' ? Daily_plannerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Daily_planner ? Daily_planner[P] : never
  } 
      : Daily_planner


  type Daily_plannerCountArgs = 
    Omit<Daily_plannerFindManyArgs, 'select' | 'include'> & {
      select?: Daily_plannerCountAggregateInputType | true
    }

  export interface Daily_plannerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Daily_planner that matches the filter.
     * @param {Daily_plannerFindUniqueArgs} args - Arguments to find a Daily_planner
     * @example
     * // Get one Daily_planner
     * const daily_planner = await prisma.daily_planner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Daily_plannerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Daily_plannerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Daily_planner'> extends True ? Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>> : Prisma__Daily_plannerClient<Daily_plannerGetPayload<T> | null, null>

    /**
     * Find one Daily_planner that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Daily_plannerFindUniqueOrThrowArgs} args - Arguments to find a Daily_planner
     * @example
     * // Get one Daily_planner
     * const daily_planner = await prisma.daily_planner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Daily_plannerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Daily_plannerFindUniqueOrThrowArgs>
    ): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>>

    /**
     * Find the first Daily_planner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerFindFirstArgs} args - Arguments to find a Daily_planner
     * @example
     * // Get one Daily_planner
     * const daily_planner = await prisma.daily_planner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Daily_plannerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Daily_plannerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Daily_planner'> extends True ? Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>> : Prisma__Daily_plannerClient<Daily_plannerGetPayload<T> | null, null>

    /**
     * Find the first Daily_planner that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerFindFirstOrThrowArgs} args - Arguments to find a Daily_planner
     * @example
     * // Get one Daily_planner
     * const daily_planner = await prisma.daily_planner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Daily_plannerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Daily_plannerFindFirstOrThrowArgs>
    ): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>>

    /**
     * Find zero or more Daily_planners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Daily_planners
     * const daily_planners = await prisma.daily_planner.findMany()
     * 
     * // Get first 10 Daily_planners
     * const daily_planners = await prisma.daily_planner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daily_plannerWithIdOnly = await prisma.daily_planner.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Daily_plannerFindManyArgs>(
      args?: SelectSubset<T, Daily_plannerFindManyArgs>
    ): Prisma.PrismaPromise<Array<Daily_plannerGetPayload<T>>>

    /**
     * Create a Daily_planner.
     * @param {Daily_plannerCreateArgs} args - Arguments to create a Daily_planner.
     * @example
     * // Create one Daily_planner
     * const Daily_planner = await prisma.daily_planner.create({
     *   data: {
     *     // ... data to create a Daily_planner
     *   }
     * })
     * 
    **/
    create<T extends Daily_plannerCreateArgs>(
      args: SelectSubset<T, Daily_plannerCreateArgs>
    ): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>>

    /**
     * Create many Daily_planners.
     *     @param {Daily_plannerCreateManyArgs} args - Arguments to create many Daily_planners.
     *     @example
     *     // Create many Daily_planners
     *     const daily_planner = await prisma.daily_planner.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Daily_plannerCreateManyArgs>(
      args?: SelectSubset<T, Daily_plannerCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Daily_planner.
     * @param {Daily_plannerDeleteArgs} args - Arguments to delete one Daily_planner.
     * @example
     * // Delete one Daily_planner
     * const Daily_planner = await prisma.daily_planner.delete({
     *   where: {
     *     // ... filter to delete one Daily_planner
     *   }
     * })
     * 
    **/
    delete<T extends Daily_plannerDeleteArgs>(
      args: SelectSubset<T, Daily_plannerDeleteArgs>
    ): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>>

    /**
     * Update one Daily_planner.
     * @param {Daily_plannerUpdateArgs} args - Arguments to update one Daily_planner.
     * @example
     * // Update one Daily_planner
     * const daily_planner = await prisma.daily_planner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Daily_plannerUpdateArgs>(
      args: SelectSubset<T, Daily_plannerUpdateArgs>
    ): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>>

    /**
     * Delete zero or more Daily_planners.
     * @param {Daily_plannerDeleteManyArgs} args - Arguments to filter Daily_planners to delete.
     * @example
     * // Delete a few Daily_planners
     * const { count } = await prisma.daily_planner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Daily_plannerDeleteManyArgs>(
      args?: SelectSubset<T, Daily_plannerDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Daily_planners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Daily_planners
     * const daily_planner = await prisma.daily_planner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Daily_plannerUpdateManyArgs>(
      args: SelectSubset<T, Daily_plannerUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Daily_planner.
     * @param {Daily_plannerUpsertArgs} args - Arguments to update or create a Daily_planner.
     * @example
     * // Update or create a Daily_planner
     * const daily_planner = await prisma.daily_planner.upsert({
     *   create: {
     *     // ... data to create a Daily_planner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Daily_planner we want to update
     *   }
     * })
    **/
    upsert<T extends Daily_plannerUpsertArgs>(
      args: SelectSubset<T, Daily_plannerUpsertArgs>
    ): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T>>

    /**
     * Count the number of Daily_planners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerCountArgs} args - Arguments to filter Daily_planners to count.
     * @example
     * // Count the number of Daily_planners
     * const count = await prisma.daily_planner.count({
     *   where: {
     *     // ... the filter for the Daily_planners we want to count
     *   }
     * })
    **/
    count<T extends Daily_plannerCountArgs>(
      args?: Subset<T, Daily_plannerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Daily_plannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Daily_planner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Daily_plannerAggregateArgs>(args: Subset<T, Daily_plannerAggregateArgs>): Prisma.PrismaPromise<GetDaily_plannerAggregateType<T>>

    /**
     * Group by Daily_planner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_plannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Daily_plannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Daily_plannerGroupByArgs['orderBy'] }
        : { orderBy?: Daily_plannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Daily_plannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaily_plannerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Daily_planner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Daily_plannerClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Monthly_planner<T extends Monthly_plannerArgs= {}>(args?: Subset<T, Monthly_plannerArgs>): Prisma__Monthly_plannerClient<Monthly_plannerGetPayload<T> | Null>;

    to_do_list<T extends Daily_planner$to_do_listArgs= {}>(args?: Subset<T, Daily_planner$to_do_listArgs>): Prisma.PrismaPromise<Array<Daily_to_do_listGetPayload<T>>| Null>;

    most_important<T extends Daily_planner$most_importantArgs= {}>(args?: Subset<T, Daily_planner$most_importantArgs>): Prisma.PrismaPromise<Array<Daily_most_importantGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Daily_planner base type for findUnique actions
   */
  export type Daily_plannerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * Filter, which Daily_planner to fetch.
     */
    where: Daily_plannerWhereUniqueInput
  }

  /**
   * Daily_planner findUnique
   */
  export interface Daily_plannerFindUniqueArgs extends Daily_plannerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Daily_planner findUniqueOrThrow
   */
  export type Daily_plannerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * Filter, which Daily_planner to fetch.
     */
    where: Daily_plannerWhereUniqueInput
  }


  /**
   * Daily_planner base type for findFirst actions
   */
  export type Daily_plannerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * Filter, which Daily_planner to fetch.
     */
    where?: Daily_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_planners to fetch.
     */
    orderBy?: Enumerable<Daily_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Daily_planners.
     */
    cursor?: Daily_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_planners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Daily_planners.
     */
    distinct?: Enumerable<Daily_plannerScalarFieldEnum>
  }

  /**
   * Daily_planner findFirst
   */
  export interface Daily_plannerFindFirstArgs extends Daily_plannerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Daily_planner findFirstOrThrow
   */
  export type Daily_plannerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * Filter, which Daily_planner to fetch.
     */
    where?: Daily_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_planners to fetch.
     */
    orderBy?: Enumerable<Daily_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Daily_planners.
     */
    cursor?: Daily_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_planners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Daily_planners.
     */
    distinct?: Enumerable<Daily_plannerScalarFieldEnum>
  }


  /**
   * Daily_planner findMany
   */
  export type Daily_plannerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * Filter, which Daily_planners to fetch.
     */
    where?: Daily_plannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_planners to fetch.
     */
    orderBy?: Enumerable<Daily_plannerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Daily_planners.
     */
    cursor?: Daily_plannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_planners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_planners.
     */
    skip?: number
    distinct?: Enumerable<Daily_plannerScalarFieldEnum>
  }


  /**
   * Daily_planner create
   */
  export type Daily_plannerCreateArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * The data needed to create a Daily_planner.
     */
    data: XOR<Daily_plannerCreateInput, Daily_plannerUncheckedCreateInput>
  }


  /**
   * Daily_planner createMany
   */
  export type Daily_plannerCreateManyArgs = {
    /**
     * The data used to create many Daily_planners.
     */
    data: Enumerable<Daily_plannerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Daily_planner update
   */
  export type Daily_plannerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * The data needed to update a Daily_planner.
     */
    data: XOR<Daily_plannerUpdateInput, Daily_plannerUncheckedUpdateInput>
    /**
     * Choose, which Daily_planner to update.
     */
    where: Daily_plannerWhereUniqueInput
  }


  /**
   * Daily_planner updateMany
   */
  export type Daily_plannerUpdateManyArgs = {
    /**
     * The data used to update Daily_planners.
     */
    data: XOR<Daily_plannerUpdateManyMutationInput, Daily_plannerUncheckedUpdateManyInput>
    /**
     * Filter which Daily_planners to update
     */
    where?: Daily_plannerWhereInput
  }


  /**
   * Daily_planner upsert
   */
  export type Daily_plannerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * The filter to search for the Daily_planner to update in case it exists.
     */
    where: Daily_plannerWhereUniqueInput
    /**
     * In case the Daily_planner found by the `where` argument doesn't exist, create a new Daily_planner with this data.
     */
    create: XOR<Daily_plannerCreateInput, Daily_plannerUncheckedCreateInput>
    /**
     * In case the Daily_planner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Daily_plannerUpdateInput, Daily_plannerUncheckedUpdateInput>
  }


  /**
   * Daily_planner delete
   */
  export type Daily_plannerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
    /**
     * Filter which Daily_planner to delete.
     */
    where: Daily_plannerWhereUniqueInput
  }


  /**
   * Daily_planner deleteMany
   */
  export type Daily_plannerDeleteManyArgs = {
    /**
     * Filter which Daily_planners to delete
     */
    where?: Daily_plannerWhereInput
  }


  /**
   * Daily_planner.to_do_list
   */
  export type Daily_planner$to_do_listArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    where?: Daily_to_do_listWhereInput
    orderBy?: Enumerable<Daily_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Daily_to_do_listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Daily_to_do_listScalarFieldEnum>
  }


  /**
   * Daily_planner.most_important
   */
  export type Daily_planner$most_importantArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    where?: Daily_most_importantWhereInput
    orderBy?: Enumerable<Daily_most_importantOrderByWithRelationAndSearchRelevanceInput>
    cursor?: Daily_most_importantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Daily_most_importantScalarFieldEnum>
  }


  /**
   * Daily_planner without action
   */
  export type Daily_plannerArgs = {
    /**
     * Select specific fields to fetch from the Daily_planner
     */
    select?: Daily_plannerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_plannerInclude | null
  }



  /**
   * Model Daily_to_do_list
   */


  export type AggregateDaily_to_do_list = {
    _count: Daily_to_do_listCountAggregateOutputType | null
    _avg: Daily_to_do_listAvgAggregateOutputType | null
    _sum: Daily_to_do_listSumAggregateOutputType | null
    _min: Daily_to_do_listMinAggregateOutputType | null
    _max: Daily_to_do_listMaxAggregateOutputType | null
  }

  export type Daily_to_do_listAvgAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
  }

  export type Daily_to_do_listSumAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
  }

  export type Daily_to_do_listMinAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
    data: string | null
  }

  export type Daily_to_do_listMaxAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
    data: string | null
  }

  export type Daily_to_do_listCountAggregateOutputType = {
    id: number
    daily_planner_id: number
    data: number
    _all: number
  }


  export type Daily_to_do_listAvgAggregateInputType = {
    id?: true
    daily_planner_id?: true
  }

  export type Daily_to_do_listSumAggregateInputType = {
    id?: true
    daily_planner_id?: true
  }

  export type Daily_to_do_listMinAggregateInputType = {
    id?: true
    daily_planner_id?: true
    data?: true
  }

  export type Daily_to_do_listMaxAggregateInputType = {
    id?: true
    daily_planner_id?: true
    data?: true
  }

  export type Daily_to_do_listCountAggregateInputType = {
    id?: true
    daily_planner_id?: true
    data?: true
    _all?: true
  }

  export type Daily_to_do_listAggregateArgs = {
    /**
     * Filter which Daily_to_do_list to aggregate.
     */
    where?: Daily_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Daily_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Daily_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_to_do_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Daily_to_do_lists
    **/
    _count?: true | Daily_to_do_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Daily_to_do_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Daily_to_do_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Daily_to_do_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Daily_to_do_listMaxAggregateInputType
  }

  export type GetDaily_to_do_listAggregateType<T extends Daily_to_do_listAggregateArgs> = {
        [P in keyof T & keyof AggregateDaily_to_do_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaily_to_do_list[P]>
      : GetScalarType<T[P], AggregateDaily_to_do_list[P]>
  }




  export type Daily_to_do_listGroupByArgs = {
    where?: Daily_to_do_listWhereInput
    orderBy?: Enumerable<Daily_to_do_listOrderByWithAggregationInput>
    by: Daily_to_do_listScalarFieldEnum[]
    having?: Daily_to_do_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Daily_to_do_listCountAggregateInputType | true
    _avg?: Daily_to_do_listAvgAggregateInputType
    _sum?: Daily_to_do_listSumAggregateInputType
    _min?: Daily_to_do_listMinAggregateInputType
    _max?: Daily_to_do_listMaxAggregateInputType
  }


  export type Daily_to_do_listGroupByOutputType = {
    id: number
    daily_planner_id: number
    data: string
    _count: Daily_to_do_listCountAggregateOutputType | null
    _avg: Daily_to_do_listAvgAggregateOutputType | null
    _sum: Daily_to_do_listSumAggregateOutputType | null
    _min: Daily_to_do_listMinAggregateOutputType | null
    _max: Daily_to_do_listMaxAggregateOutputType | null
  }

  type GetDaily_to_do_listGroupByPayload<T extends Daily_to_do_listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Daily_to_do_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Daily_to_do_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Daily_to_do_listGroupByOutputType[P]>
            : GetScalarType<T[P], Daily_to_do_listGroupByOutputType[P]>
        }
      >
    >


  export type Daily_to_do_listSelect = {
    id?: boolean
    daily_planner_id?: boolean
    data?: boolean
    Daily_planner?: boolean | Daily_plannerArgs
  }


  export type Daily_to_do_listInclude = {
    Daily_planner?: boolean | Daily_plannerArgs
  }

  export type Daily_to_do_listGetPayload<S extends boolean | null | undefined | Daily_to_do_listArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Daily_to_do_list :
    S extends undefined ? never :
    S extends { include: any } & (Daily_to_do_listArgs | Daily_to_do_listFindManyArgs)
    ? Daily_to_do_list  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Daily_planner' ? Daily_plannerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Daily_to_do_listArgs | Daily_to_do_listFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Daily_planner' ? Daily_plannerGetPayload<S['select'][P]> :  P extends keyof Daily_to_do_list ? Daily_to_do_list[P] : never
  } 
      : Daily_to_do_list


  type Daily_to_do_listCountArgs = 
    Omit<Daily_to_do_listFindManyArgs, 'select' | 'include'> & {
      select?: Daily_to_do_listCountAggregateInputType | true
    }

  export interface Daily_to_do_listDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Daily_to_do_list that matches the filter.
     * @param {Daily_to_do_listFindUniqueArgs} args - Arguments to find a Daily_to_do_list
     * @example
     * // Get one Daily_to_do_list
     * const daily_to_do_list = await prisma.daily_to_do_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Daily_to_do_listFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Daily_to_do_listFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Daily_to_do_list'> extends True ? Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>> : Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T> | null, null>

    /**
     * Find one Daily_to_do_list that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Daily_to_do_listFindUniqueOrThrowArgs} args - Arguments to find a Daily_to_do_list
     * @example
     * // Get one Daily_to_do_list
     * const daily_to_do_list = await prisma.daily_to_do_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Daily_to_do_listFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Daily_to_do_listFindUniqueOrThrowArgs>
    ): Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>>

    /**
     * Find the first Daily_to_do_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listFindFirstArgs} args - Arguments to find a Daily_to_do_list
     * @example
     * // Get one Daily_to_do_list
     * const daily_to_do_list = await prisma.daily_to_do_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Daily_to_do_listFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Daily_to_do_listFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Daily_to_do_list'> extends True ? Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>> : Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T> | null, null>

    /**
     * Find the first Daily_to_do_list that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listFindFirstOrThrowArgs} args - Arguments to find a Daily_to_do_list
     * @example
     * // Get one Daily_to_do_list
     * const daily_to_do_list = await prisma.daily_to_do_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Daily_to_do_listFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Daily_to_do_listFindFirstOrThrowArgs>
    ): Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>>

    /**
     * Find zero or more Daily_to_do_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Daily_to_do_lists
     * const daily_to_do_lists = await prisma.daily_to_do_list.findMany()
     * 
     * // Get first 10 Daily_to_do_lists
     * const daily_to_do_lists = await prisma.daily_to_do_list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daily_to_do_listWithIdOnly = await prisma.daily_to_do_list.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Daily_to_do_listFindManyArgs>(
      args?: SelectSubset<T, Daily_to_do_listFindManyArgs>
    ): Prisma.PrismaPromise<Array<Daily_to_do_listGetPayload<T>>>

    /**
     * Create a Daily_to_do_list.
     * @param {Daily_to_do_listCreateArgs} args - Arguments to create a Daily_to_do_list.
     * @example
     * // Create one Daily_to_do_list
     * const Daily_to_do_list = await prisma.daily_to_do_list.create({
     *   data: {
     *     // ... data to create a Daily_to_do_list
     *   }
     * })
     * 
    **/
    create<T extends Daily_to_do_listCreateArgs>(
      args: SelectSubset<T, Daily_to_do_listCreateArgs>
    ): Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>>

    /**
     * Create many Daily_to_do_lists.
     *     @param {Daily_to_do_listCreateManyArgs} args - Arguments to create many Daily_to_do_lists.
     *     @example
     *     // Create many Daily_to_do_lists
     *     const daily_to_do_list = await prisma.daily_to_do_list.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Daily_to_do_listCreateManyArgs>(
      args?: SelectSubset<T, Daily_to_do_listCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Daily_to_do_list.
     * @param {Daily_to_do_listDeleteArgs} args - Arguments to delete one Daily_to_do_list.
     * @example
     * // Delete one Daily_to_do_list
     * const Daily_to_do_list = await prisma.daily_to_do_list.delete({
     *   where: {
     *     // ... filter to delete one Daily_to_do_list
     *   }
     * })
     * 
    **/
    delete<T extends Daily_to_do_listDeleteArgs>(
      args: SelectSubset<T, Daily_to_do_listDeleteArgs>
    ): Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>>

    /**
     * Update one Daily_to_do_list.
     * @param {Daily_to_do_listUpdateArgs} args - Arguments to update one Daily_to_do_list.
     * @example
     * // Update one Daily_to_do_list
     * const daily_to_do_list = await prisma.daily_to_do_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Daily_to_do_listUpdateArgs>(
      args: SelectSubset<T, Daily_to_do_listUpdateArgs>
    ): Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>>

    /**
     * Delete zero or more Daily_to_do_lists.
     * @param {Daily_to_do_listDeleteManyArgs} args - Arguments to filter Daily_to_do_lists to delete.
     * @example
     * // Delete a few Daily_to_do_lists
     * const { count } = await prisma.daily_to_do_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Daily_to_do_listDeleteManyArgs>(
      args?: SelectSubset<T, Daily_to_do_listDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Daily_to_do_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Daily_to_do_lists
     * const daily_to_do_list = await prisma.daily_to_do_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Daily_to_do_listUpdateManyArgs>(
      args: SelectSubset<T, Daily_to_do_listUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Daily_to_do_list.
     * @param {Daily_to_do_listUpsertArgs} args - Arguments to update or create a Daily_to_do_list.
     * @example
     * // Update or create a Daily_to_do_list
     * const daily_to_do_list = await prisma.daily_to_do_list.upsert({
     *   create: {
     *     // ... data to create a Daily_to_do_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Daily_to_do_list we want to update
     *   }
     * })
    **/
    upsert<T extends Daily_to_do_listUpsertArgs>(
      args: SelectSubset<T, Daily_to_do_listUpsertArgs>
    ): Prisma__Daily_to_do_listClient<Daily_to_do_listGetPayload<T>>

    /**
     * Count the number of Daily_to_do_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listCountArgs} args - Arguments to filter Daily_to_do_lists to count.
     * @example
     * // Count the number of Daily_to_do_lists
     * const count = await prisma.daily_to_do_list.count({
     *   where: {
     *     // ... the filter for the Daily_to_do_lists we want to count
     *   }
     * })
    **/
    count<T extends Daily_to_do_listCountArgs>(
      args?: Subset<T, Daily_to_do_listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Daily_to_do_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Daily_to_do_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Daily_to_do_listAggregateArgs>(args: Subset<T, Daily_to_do_listAggregateArgs>): Prisma.PrismaPromise<GetDaily_to_do_listAggregateType<T>>

    /**
     * Group by Daily_to_do_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_to_do_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Daily_to_do_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Daily_to_do_listGroupByArgs['orderBy'] }
        : { orderBy?: Daily_to_do_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Daily_to_do_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaily_to_do_listGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Daily_to_do_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Daily_to_do_listClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Daily_planner<T extends Daily_plannerArgs= {}>(args?: Subset<T, Daily_plannerArgs>): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Daily_to_do_list base type for findUnique actions
   */
  export type Daily_to_do_listFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * Filter, which Daily_to_do_list to fetch.
     */
    where: Daily_to_do_listWhereUniqueInput
  }

  /**
   * Daily_to_do_list findUnique
   */
  export interface Daily_to_do_listFindUniqueArgs extends Daily_to_do_listFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Daily_to_do_list findUniqueOrThrow
   */
  export type Daily_to_do_listFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * Filter, which Daily_to_do_list to fetch.
     */
    where: Daily_to_do_listWhereUniqueInput
  }


  /**
   * Daily_to_do_list base type for findFirst actions
   */
  export type Daily_to_do_listFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * Filter, which Daily_to_do_list to fetch.
     */
    where?: Daily_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Daily_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Daily_to_do_lists.
     */
    cursor?: Daily_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_to_do_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Daily_to_do_lists.
     */
    distinct?: Enumerable<Daily_to_do_listScalarFieldEnum>
  }

  /**
   * Daily_to_do_list findFirst
   */
  export interface Daily_to_do_listFindFirstArgs extends Daily_to_do_listFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Daily_to_do_list findFirstOrThrow
   */
  export type Daily_to_do_listFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * Filter, which Daily_to_do_list to fetch.
     */
    where?: Daily_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Daily_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Daily_to_do_lists.
     */
    cursor?: Daily_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_to_do_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Daily_to_do_lists.
     */
    distinct?: Enumerable<Daily_to_do_listScalarFieldEnum>
  }


  /**
   * Daily_to_do_list findMany
   */
  export type Daily_to_do_listFindManyArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * Filter, which Daily_to_do_lists to fetch.
     */
    where?: Daily_to_do_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_to_do_lists to fetch.
     */
    orderBy?: Enumerable<Daily_to_do_listOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Daily_to_do_lists.
     */
    cursor?: Daily_to_do_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_to_do_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_to_do_lists.
     */
    skip?: number
    distinct?: Enumerable<Daily_to_do_listScalarFieldEnum>
  }


  /**
   * Daily_to_do_list create
   */
  export type Daily_to_do_listCreateArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * The data needed to create a Daily_to_do_list.
     */
    data: XOR<Daily_to_do_listCreateInput, Daily_to_do_listUncheckedCreateInput>
  }


  /**
   * Daily_to_do_list createMany
   */
  export type Daily_to_do_listCreateManyArgs = {
    /**
     * The data used to create many Daily_to_do_lists.
     */
    data: Enumerable<Daily_to_do_listCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Daily_to_do_list update
   */
  export type Daily_to_do_listUpdateArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * The data needed to update a Daily_to_do_list.
     */
    data: XOR<Daily_to_do_listUpdateInput, Daily_to_do_listUncheckedUpdateInput>
    /**
     * Choose, which Daily_to_do_list to update.
     */
    where: Daily_to_do_listWhereUniqueInput
  }


  /**
   * Daily_to_do_list updateMany
   */
  export type Daily_to_do_listUpdateManyArgs = {
    /**
     * The data used to update Daily_to_do_lists.
     */
    data: XOR<Daily_to_do_listUpdateManyMutationInput, Daily_to_do_listUncheckedUpdateManyInput>
    /**
     * Filter which Daily_to_do_lists to update
     */
    where?: Daily_to_do_listWhereInput
  }


  /**
   * Daily_to_do_list upsert
   */
  export type Daily_to_do_listUpsertArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * The filter to search for the Daily_to_do_list to update in case it exists.
     */
    where: Daily_to_do_listWhereUniqueInput
    /**
     * In case the Daily_to_do_list found by the `where` argument doesn't exist, create a new Daily_to_do_list with this data.
     */
    create: XOR<Daily_to_do_listCreateInput, Daily_to_do_listUncheckedCreateInput>
    /**
     * In case the Daily_to_do_list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Daily_to_do_listUpdateInput, Daily_to_do_listUncheckedUpdateInput>
  }


  /**
   * Daily_to_do_list delete
   */
  export type Daily_to_do_listDeleteArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
    /**
     * Filter which Daily_to_do_list to delete.
     */
    where: Daily_to_do_listWhereUniqueInput
  }


  /**
   * Daily_to_do_list deleteMany
   */
  export type Daily_to_do_listDeleteManyArgs = {
    /**
     * Filter which Daily_to_do_lists to delete
     */
    where?: Daily_to_do_listWhereInput
  }


  /**
   * Daily_to_do_list without action
   */
  export type Daily_to_do_listArgs = {
    /**
     * Select specific fields to fetch from the Daily_to_do_list
     */
    select?: Daily_to_do_listSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_to_do_listInclude | null
  }



  /**
   * Model Daily_most_important
   */


  export type AggregateDaily_most_important = {
    _count: Daily_most_importantCountAggregateOutputType | null
    _avg: Daily_most_importantAvgAggregateOutputType | null
    _sum: Daily_most_importantSumAggregateOutputType | null
    _min: Daily_most_importantMinAggregateOutputType | null
    _max: Daily_most_importantMaxAggregateOutputType | null
  }

  export type Daily_most_importantAvgAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
  }

  export type Daily_most_importantSumAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
  }

  export type Daily_most_importantMinAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
    data: string | null
  }

  export type Daily_most_importantMaxAggregateOutputType = {
    id: number | null
    daily_planner_id: number | null
    data: string | null
  }

  export type Daily_most_importantCountAggregateOutputType = {
    id: number
    daily_planner_id: number
    data: number
    _all: number
  }


  export type Daily_most_importantAvgAggregateInputType = {
    id?: true
    daily_planner_id?: true
  }

  export type Daily_most_importantSumAggregateInputType = {
    id?: true
    daily_planner_id?: true
  }

  export type Daily_most_importantMinAggregateInputType = {
    id?: true
    daily_planner_id?: true
    data?: true
  }

  export type Daily_most_importantMaxAggregateInputType = {
    id?: true
    daily_planner_id?: true
    data?: true
  }

  export type Daily_most_importantCountAggregateInputType = {
    id?: true
    daily_planner_id?: true
    data?: true
    _all?: true
  }

  export type Daily_most_importantAggregateArgs = {
    /**
     * Filter which Daily_most_important to aggregate.
     */
    where?: Daily_most_importantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_most_importants to fetch.
     */
    orderBy?: Enumerable<Daily_most_importantOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Daily_most_importantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_most_importants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_most_importants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Daily_most_importants
    **/
    _count?: true | Daily_most_importantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Daily_most_importantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Daily_most_importantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Daily_most_importantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Daily_most_importantMaxAggregateInputType
  }

  export type GetDaily_most_importantAggregateType<T extends Daily_most_importantAggregateArgs> = {
        [P in keyof T & keyof AggregateDaily_most_important]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaily_most_important[P]>
      : GetScalarType<T[P], AggregateDaily_most_important[P]>
  }




  export type Daily_most_importantGroupByArgs = {
    where?: Daily_most_importantWhereInput
    orderBy?: Enumerable<Daily_most_importantOrderByWithAggregationInput>
    by: Daily_most_importantScalarFieldEnum[]
    having?: Daily_most_importantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Daily_most_importantCountAggregateInputType | true
    _avg?: Daily_most_importantAvgAggregateInputType
    _sum?: Daily_most_importantSumAggregateInputType
    _min?: Daily_most_importantMinAggregateInputType
    _max?: Daily_most_importantMaxAggregateInputType
  }


  export type Daily_most_importantGroupByOutputType = {
    id: number
    daily_planner_id: number
    data: string
    _count: Daily_most_importantCountAggregateOutputType | null
    _avg: Daily_most_importantAvgAggregateOutputType | null
    _sum: Daily_most_importantSumAggregateOutputType | null
    _min: Daily_most_importantMinAggregateOutputType | null
    _max: Daily_most_importantMaxAggregateOutputType | null
  }

  type GetDaily_most_importantGroupByPayload<T extends Daily_most_importantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Daily_most_importantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Daily_most_importantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Daily_most_importantGroupByOutputType[P]>
            : GetScalarType<T[P], Daily_most_importantGroupByOutputType[P]>
        }
      >
    >


  export type Daily_most_importantSelect = {
    id?: boolean
    daily_planner_id?: boolean
    data?: boolean
    Daily_planner?: boolean | Daily_plannerArgs
  }


  export type Daily_most_importantInclude = {
    Daily_planner?: boolean | Daily_plannerArgs
  }

  export type Daily_most_importantGetPayload<S extends boolean | null | undefined | Daily_most_importantArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Daily_most_important :
    S extends undefined ? never :
    S extends { include: any } & (Daily_most_importantArgs | Daily_most_importantFindManyArgs)
    ? Daily_most_important  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Daily_planner' ? Daily_plannerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Daily_most_importantArgs | Daily_most_importantFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Daily_planner' ? Daily_plannerGetPayload<S['select'][P]> :  P extends keyof Daily_most_important ? Daily_most_important[P] : never
  } 
      : Daily_most_important


  type Daily_most_importantCountArgs = 
    Omit<Daily_most_importantFindManyArgs, 'select' | 'include'> & {
      select?: Daily_most_importantCountAggregateInputType | true
    }

  export interface Daily_most_importantDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Daily_most_important that matches the filter.
     * @param {Daily_most_importantFindUniqueArgs} args - Arguments to find a Daily_most_important
     * @example
     * // Get one Daily_most_important
     * const daily_most_important = await prisma.daily_most_important.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Daily_most_importantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Daily_most_importantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Daily_most_important'> extends True ? Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>> : Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T> | null, null>

    /**
     * Find one Daily_most_important that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Daily_most_importantFindUniqueOrThrowArgs} args - Arguments to find a Daily_most_important
     * @example
     * // Get one Daily_most_important
     * const daily_most_important = await prisma.daily_most_important.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Daily_most_importantFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Daily_most_importantFindUniqueOrThrowArgs>
    ): Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>>

    /**
     * Find the first Daily_most_important that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantFindFirstArgs} args - Arguments to find a Daily_most_important
     * @example
     * // Get one Daily_most_important
     * const daily_most_important = await prisma.daily_most_important.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Daily_most_importantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Daily_most_importantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Daily_most_important'> extends True ? Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>> : Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T> | null, null>

    /**
     * Find the first Daily_most_important that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantFindFirstOrThrowArgs} args - Arguments to find a Daily_most_important
     * @example
     * // Get one Daily_most_important
     * const daily_most_important = await prisma.daily_most_important.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Daily_most_importantFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Daily_most_importantFindFirstOrThrowArgs>
    ): Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>>

    /**
     * Find zero or more Daily_most_importants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Daily_most_importants
     * const daily_most_importants = await prisma.daily_most_important.findMany()
     * 
     * // Get first 10 Daily_most_importants
     * const daily_most_importants = await prisma.daily_most_important.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daily_most_importantWithIdOnly = await prisma.daily_most_important.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Daily_most_importantFindManyArgs>(
      args?: SelectSubset<T, Daily_most_importantFindManyArgs>
    ): Prisma.PrismaPromise<Array<Daily_most_importantGetPayload<T>>>

    /**
     * Create a Daily_most_important.
     * @param {Daily_most_importantCreateArgs} args - Arguments to create a Daily_most_important.
     * @example
     * // Create one Daily_most_important
     * const Daily_most_important = await prisma.daily_most_important.create({
     *   data: {
     *     // ... data to create a Daily_most_important
     *   }
     * })
     * 
    **/
    create<T extends Daily_most_importantCreateArgs>(
      args: SelectSubset<T, Daily_most_importantCreateArgs>
    ): Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>>

    /**
     * Create many Daily_most_importants.
     *     @param {Daily_most_importantCreateManyArgs} args - Arguments to create many Daily_most_importants.
     *     @example
     *     // Create many Daily_most_importants
     *     const daily_most_important = await prisma.daily_most_important.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Daily_most_importantCreateManyArgs>(
      args?: SelectSubset<T, Daily_most_importantCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Daily_most_important.
     * @param {Daily_most_importantDeleteArgs} args - Arguments to delete one Daily_most_important.
     * @example
     * // Delete one Daily_most_important
     * const Daily_most_important = await prisma.daily_most_important.delete({
     *   where: {
     *     // ... filter to delete one Daily_most_important
     *   }
     * })
     * 
    **/
    delete<T extends Daily_most_importantDeleteArgs>(
      args: SelectSubset<T, Daily_most_importantDeleteArgs>
    ): Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>>

    /**
     * Update one Daily_most_important.
     * @param {Daily_most_importantUpdateArgs} args - Arguments to update one Daily_most_important.
     * @example
     * // Update one Daily_most_important
     * const daily_most_important = await prisma.daily_most_important.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Daily_most_importantUpdateArgs>(
      args: SelectSubset<T, Daily_most_importantUpdateArgs>
    ): Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>>

    /**
     * Delete zero or more Daily_most_importants.
     * @param {Daily_most_importantDeleteManyArgs} args - Arguments to filter Daily_most_importants to delete.
     * @example
     * // Delete a few Daily_most_importants
     * const { count } = await prisma.daily_most_important.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Daily_most_importantDeleteManyArgs>(
      args?: SelectSubset<T, Daily_most_importantDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Daily_most_importants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Daily_most_importants
     * const daily_most_important = await prisma.daily_most_important.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Daily_most_importantUpdateManyArgs>(
      args: SelectSubset<T, Daily_most_importantUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Daily_most_important.
     * @param {Daily_most_importantUpsertArgs} args - Arguments to update or create a Daily_most_important.
     * @example
     * // Update or create a Daily_most_important
     * const daily_most_important = await prisma.daily_most_important.upsert({
     *   create: {
     *     // ... data to create a Daily_most_important
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Daily_most_important we want to update
     *   }
     * })
    **/
    upsert<T extends Daily_most_importantUpsertArgs>(
      args: SelectSubset<T, Daily_most_importantUpsertArgs>
    ): Prisma__Daily_most_importantClient<Daily_most_importantGetPayload<T>>

    /**
     * Count the number of Daily_most_importants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantCountArgs} args - Arguments to filter Daily_most_importants to count.
     * @example
     * // Count the number of Daily_most_importants
     * const count = await prisma.daily_most_important.count({
     *   where: {
     *     // ... the filter for the Daily_most_importants we want to count
     *   }
     * })
    **/
    count<T extends Daily_most_importantCountArgs>(
      args?: Subset<T, Daily_most_importantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Daily_most_importantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Daily_most_important.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Daily_most_importantAggregateArgs>(args: Subset<T, Daily_most_importantAggregateArgs>): Prisma.PrismaPromise<GetDaily_most_importantAggregateType<T>>

    /**
     * Group by Daily_most_important.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daily_most_importantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Daily_most_importantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Daily_most_importantGroupByArgs['orderBy'] }
        : { orderBy?: Daily_most_importantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Daily_most_importantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaily_most_importantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Daily_most_important.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Daily_most_importantClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Daily_planner<T extends Daily_plannerArgs= {}>(args?: Subset<T, Daily_plannerArgs>): Prisma__Daily_plannerClient<Daily_plannerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Daily_most_important base type for findUnique actions
   */
  export type Daily_most_importantFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * Filter, which Daily_most_important to fetch.
     */
    where: Daily_most_importantWhereUniqueInput
  }

  /**
   * Daily_most_important findUnique
   */
  export interface Daily_most_importantFindUniqueArgs extends Daily_most_importantFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Daily_most_important findUniqueOrThrow
   */
  export type Daily_most_importantFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * Filter, which Daily_most_important to fetch.
     */
    where: Daily_most_importantWhereUniqueInput
  }


  /**
   * Daily_most_important base type for findFirst actions
   */
  export type Daily_most_importantFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * Filter, which Daily_most_important to fetch.
     */
    where?: Daily_most_importantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_most_importants to fetch.
     */
    orderBy?: Enumerable<Daily_most_importantOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Daily_most_importants.
     */
    cursor?: Daily_most_importantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_most_importants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_most_importants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Daily_most_importants.
     */
    distinct?: Enumerable<Daily_most_importantScalarFieldEnum>
  }

  /**
   * Daily_most_important findFirst
   */
  export interface Daily_most_importantFindFirstArgs extends Daily_most_importantFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Daily_most_important findFirstOrThrow
   */
  export type Daily_most_importantFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * Filter, which Daily_most_important to fetch.
     */
    where?: Daily_most_importantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_most_importants to fetch.
     */
    orderBy?: Enumerable<Daily_most_importantOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Daily_most_importants.
     */
    cursor?: Daily_most_importantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_most_importants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_most_importants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Daily_most_importants.
     */
    distinct?: Enumerable<Daily_most_importantScalarFieldEnum>
  }


  /**
   * Daily_most_important findMany
   */
  export type Daily_most_importantFindManyArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * Filter, which Daily_most_importants to fetch.
     */
    where?: Daily_most_importantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Daily_most_importants to fetch.
     */
    orderBy?: Enumerable<Daily_most_importantOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Daily_most_importants.
     */
    cursor?: Daily_most_importantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Daily_most_importants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Daily_most_importants.
     */
    skip?: number
    distinct?: Enumerable<Daily_most_importantScalarFieldEnum>
  }


  /**
   * Daily_most_important create
   */
  export type Daily_most_importantCreateArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * The data needed to create a Daily_most_important.
     */
    data: XOR<Daily_most_importantCreateInput, Daily_most_importantUncheckedCreateInput>
  }


  /**
   * Daily_most_important createMany
   */
  export type Daily_most_importantCreateManyArgs = {
    /**
     * The data used to create many Daily_most_importants.
     */
    data: Enumerable<Daily_most_importantCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Daily_most_important update
   */
  export type Daily_most_importantUpdateArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * The data needed to update a Daily_most_important.
     */
    data: XOR<Daily_most_importantUpdateInput, Daily_most_importantUncheckedUpdateInput>
    /**
     * Choose, which Daily_most_important to update.
     */
    where: Daily_most_importantWhereUniqueInput
  }


  /**
   * Daily_most_important updateMany
   */
  export type Daily_most_importantUpdateManyArgs = {
    /**
     * The data used to update Daily_most_importants.
     */
    data: XOR<Daily_most_importantUpdateManyMutationInput, Daily_most_importantUncheckedUpdateManyInput>
    /**
     * Filter which Daily_most_importants to update
     */
    where?: Daily_most_importantWhereInput
  }


  /**
   * Daily_most_important upsert
   */
  export type Daily_most_importantUpsertArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * The filter to search for the Daily_most_important to update in case it exists.
     */
    where: Daily_most_importantWhereUniqueInput
    /**
     * In case the Daily_most_important found by the `where` argument doesn't exist, create a new Daily_most_important with this data.
     */
    create: XOR<Daily_most_importantCreateInput, Daily_most_importantUncheckedCreateInput>
    /**
     * In case the Daily_most_important was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Daily_most_importantUpdateInput, Daily_most_importantUncheckedUpdateInput>
  }


  /**
   * Daily_most_important delete
   */
  export type Daily_most_importantDeleteArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
    /**
     * Filter which Daily_most_important to delete.
     */
    where: Daily_most_importantWhereUniqueInput
  }


  /**
   * Daily_most_important deleteMany
   */
  export type Daily_most_importantDeleteManyArgs = {
    /**
     * Filter which Daily_most_importants to delete
     */
    where?: Daily_most_importantWhereInput
  }


  /**
   * Daily_most_important without action
   */
  export type Daily_most_importantArgs = {
    /**
     * Select specific fields to fetch from the Daily_most_important
     */
    select?: Daily_most_importantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Daily_most_importantInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnimeOrderByRelevanceFieldEnum: {
    name: 'name',
    category: 'category',
    description: 'description',
    anime_pic: 'anime_pic'
  };

  export type AnimeOrderByRelevanceFieldEnum = (typeof AnimeOrderByRelevanceFieldEnum)[keyof typeof AnimeOrderByRelevanceFieldEnum]


  export const AnimeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    description: 'description',
    anime_pic: 'anime_pic',
    avg_rank: 'avg_rank',
    amount: 'amount',
    created_at: 'created_at',
    modified_at: 'modified_at'
  };

  export type AnimeScalarFieldEnum = (typeof AnimeScalarFieldEnum)[keyof typeof AnimeScalarFieldEnum]


  export const Anime_user_plannedScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    anime_id: 'anime_id',
    isPlanned: 'isPlanned',
    created_at: 'created_at',
    modified_at: 'modified_at'
  };

  export type Anime_user_plannedScalarFieldEnum = (typeof Anime_user_plannedScalarFieldEnum)[keyof typeof Anime_user_plannedScalarFieldEnum]


  export const Anime_user_rankOrderByRelevanceFieldEnum: {
    rank: 'rank',
    description: 'description',
    anime_pic: 'anime_pic'
  };

  export type Anime_user_rankOrderByRelevanceFieldEnum = (typeof Anime_user_rankOrderByRelevanceFieldEnum)[keyof typeof Anime_user_rankOrderByRelevanceFieldEnum]


  export const Anime_user_rankScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    anime_id: 'anime_id',
    rank: 'rank',
    description: 'description',
    anime_pic: 'anime_pic',
    created_at: 'created_at',
    modified_at: 'modified_at'
  };

  export type Anime_user_rankScalarFieldEnum = (typeof Anime_user_rankScalarFieldEnum)[keyof typeof Anime_user_rankScalarFieldEnum]


  export const Daily_most_importantOrderByRelevanceFieldEnum: {
    data: 'data'
  };

  export type Daily_most_importantOrderByRelevanceFieldEnum = (typeof Daily_most_importantOrderByRelevanceFieldEnum)[keyof typeof Daily_most_importantOrderByRelevanceFieldEnum]


  export const Daily_most_importantScalarFieldEnum: {
    id: 'id',
    daily_planner_id: 'daily_planner_id',
    data: 'data'
  };

  export type Daily_most_importantScalarFieldEnum = (typeof Daily_most_importantScalarFieldEnum)[keyof typeof Daily_most_importantScalarFieldEnum]


  export const Daily_plannerOrderByRelevanceFieldEnum: {
    day: 'day',
    weekday: 'weekday',
    notes: 'notes'
  };

  export type Daily_plannerOrderByRelevanceFieldEnum = (typeof Daily_plannerOrderByRelevanceFieldEnum)[keyof typeof Daily_plannerOrderByRelevanceFieldEnum]


  export const Daily_plannerScalarFieldEnum: {
    id: 'id',
    monthly_planner_id: 'monthly_planner_id',
    day: 'day',
    weekday: 'weekday',
    notes: 'notes',
    created_at: 'created_at',
    modified_at: 'modified_at'
  };

  export type Daily_plannerScalarFieldEnum = (typeof Daily_plannerScalarFieldEnum)[keyof typeof Daily_plannerScalarFieldEnum]


  export const Daily_to_do_listOrderByRelevanceFieldEnum: {
    data: 'data'
  };

  export type Daily_to_do_listOrderByRelevanceFieldEnum = (typeof Daily_to_do_listOrderByRelevanceFieldEnum)[keyof typeof Daily_to_do_listOrderByRelevanceFieldEnum]


  export const Daily_to_do_listScalarFieldEnum: {
    id: 'id',
    daily_planner_id: 'daily_planner_id',
    data: 'data'
  };

  export type Daily_to_do_listScalarFieldEnum = (typeof Daily_to_do_listScalarFieldEnum)[keyof typeof Daily_to_do_listScalarFieldEnum]


  export const Monthly_plannerOrderByRelevanceFieldEnum: {
    month: 'month',
    year: 'year',
    notes: 'notes'
  };

  export type Monthly_plannerOrderByRelevanceFieldEnum = (typeof Monthly_plannerOrderByRelevanceFieldEnum)[keyof typeof Monthly_plannerOrderByRelevanceFieldEnum]


  export const Monthly_plannerScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    month: 'month',
    year: 'year',
    notes: 'notes',
    created_at: 'created_at',
    modified_at: 'modified_at'
  };

  export type Monthly_plannerScalarFieldEnum = (typeof Monthly_plannerScalarFieldEnum)[keyof typeof Monthly_plannerScalarFieldEnum]


  export const Monthly_to_do_listOrderByRelevanceFieldEnum: {
    data: 'data'
  };

  export type Monthly_to_do_listOrderByRelevanceFieldEnum = (typeof Monthly_to_do_listOrderByRelevanceFieldEnum)[keyof typeof Monthly_to_do_listOrderByRelevanceFieldEnum]


  export const Monthly_to_do_listScalarFieldEnum: {
    id: 'id',
    monthly_planner_id: 'monthly_planner_id',
    data: 'data'
  };

  export type Monthly_to_do_listScalarFieldEnum = (typeof Monthly_to_do_listScalarFieldEnum)[keyof typeof Monthly_to_do_listScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    sid: 'sid',
    data: 'data'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sid: 'sid',
    data: 'data',
    expiresAt: 'expiresAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserOrderByRelevanceFieldEnum: {
    username: 'username',
    password: 'password',
    name: 'name',
    user_pic: 'user_pic'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    created_at: 'created_at',
    modified_at: 'modified_at',
    user_pic: 'user_pic'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    user_pic?: StringFilter | string
    anime?: AnimeListRelationFilter
    anime_user_rank?: Anime_user_rankListRelationFilter
    anime_user_planned?: Anime_user_plannedListRelationFilter
    monthly_planner?: Monthly_plannerListRelationFilter
  }

  export type UserOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    user_pic?: SortOrder
    anime?: AnimeOrderByRelationAggregateInput
    anime_user_rank?: Anime_user_rankOrderByRelationAggregateInput
    anime_user_planned?: Anime_user_plannedOrderByRelationAggregateInput
    monthly_planner?: Monthly_plannerOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    user_pic?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    modified_at?: DateTimeWithAggregatesFilter | Date | string
    user_pic?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sid?: StringFilter | string
    data?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
  }

  export type SessionOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    sid?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sid?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sid?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sid?: StringWithAggregatesFilter | string
    data?: StringWithAggregatesFilter | string
    expiresAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AnimeWhereInput = {
    AND?: Enumerable<AnimeWhereInput>
    OR?: Enumerable<AnimeWhereInput>
    NOT?: Enumerable<AnimeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    category?: StringFilter | string
    description?: StringFilter | string
    anime_pic?: StringFilter | string
    avg_rank?: FloatFilter | number
    amount?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    users?: UserListRelationFilter
    anime_user_rank?: Anime_user_rankListRelationFilter
    anime_user_planned?: Anime_user_plannedListRelationFilter
  }

  export type AnimeOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    users?: UserOrderByRelationAggregateInput
    anime_user_rank?: Anime_user_rankOrderByRelationAggregateInput
    anime_user_planned?: Anime_user_plannedOrderByRelationAggregateInput
    _relevance?: AnimeOrderByRelevanceInput
  }

  export type AnimeWhereUniqueInput = {
    id?: number
  }

  export type AnimeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    _count?: AnimeCountOrderByAggregateInput
    _avg?: AnimeAvgOrderByAggregateInput
    _max?: AnimeMaxOrderByAggregateInput
    _min?: AnimeMinOrderByAggregateInput
    _sum?: AnimeSumOrderByAggregateInput
  }

  export type AnimeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnimeScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnimeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnimeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    anime_pic?: StringWithAggregatesFilter | string
    avg_rank?: FloatWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    modified_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Anime_user_rankWhereInput = {
    AND?: Enumerable<Anime_user_rankWhereInput>
    OR?: Enumerable<Anime_user_rankWhereInput>
    NOT?: Enumerable<Anime_user_rankWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    anime_id?: IntFilter | number
    rank?: StringFilter | string
    description?: StringFilter | string
    anime_pic?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    anime?: XOR<AnimeRelationFilter, AnimeWhereInput>
  }

  export type Anime_user_rankOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    anime?: AnimeOrderByWithRelationAndSearchRelevanceInput
    _relevance?: Anime_user_rankOrderByRelevanceInput
  }

  export type Anime_user_rankWhereUniqueInput = {
    id?: number
  }

  export type Anime_user_rankOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    _count?: Anime_user_rankCountOrderByAggregateInput
    _avg?: Anime_user_rankAvgOrderByAggregateInput
    _max?: Anime_user_rankMaxOrderByAggregateInput
    _min?: Anime_user_rankMinOrderByAggregateInput
    _sum?: Anime_user_rankSumOrderByAggregateInput
  }

  export type Anime_user_rankScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Anime_user_rankScalarWhereWithAggregatesInput>
    OR?: Enumerable<Anime_user_rankScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Anime_user_rankScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    anime_id?: IntWithAggregatesFilter | number
    rank?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    anime_pic?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    modified_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Anime_user_plannedWhereInput = {
    AND?: Enumerable<Anime_user_plannedWhereInput>
    OR?: Enumerable<Anime_user_plannedWhereInput>
    NOT?: Enumerable<Anime_user_plannedWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    anime_id?: IntFilter | number
    isPlanned?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    anime?: XOR<AnimeRelationFilter, AnimeWhereInput>
  }

  export type Anime_user_plannedOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    isPlanned?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    anime?: AnimeOrderByWithRelationAndSearchRelevanceInput
  }

  export type Anime_user_plannedWhereUniqueInput = {
    id?: number
  }

  export type Anime_user_plannedOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    isPlanned?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    _count?: Anime_user_plannedCountOrderByAggregateInput
    _avg?: Anime_user_plannedAvgOrderByAggregateInput
    _max?: Anime_user_plannedMaxOrderByAggregateInput
    _min?: Anime_user_plannedMinOrderByAggregateInput
    _sum?: Anime_user_plannedSumOrderByAggregateInput
  }

  export type Anime_user_plannedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Anime_user_plannedScalarWhereWithAggregatesInput>
    OR?: Enumerable<Anime_user_plannedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Anime_user_plannedScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    anime_id?: IntWithAggregatesFilter | number
    isPlanned?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    modified_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Monthly_plannerWhereInput = {
    AND?: Enumerable<Monthly_plannerWhereInput>
    OR?: Enumerable<Monthly_plannerWhereInput>
    NOT?: Enumerable<Monthly_plannerWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    month?: StringFilter | string
    year?: StringFilter | string
    notes?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    to_do_list?: Monthly_to_do_listListRelationFilter
    daily_planner?: Daily_plannerListRelationFilter
  }

  export type Monthly_plannerOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    user_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    User?: UserOrderByWithRelationAndSearchRelevanceInput
    to_do_list?: Monthly_to_do_listOrderByRelationAggregateInput
    daily_planner?: Daily_plannerOrderByRelationAggregateInput
    _relevance?: Monthly_plannerOrderByRelevanceInput
  }

  export type Monthly_plannerWhereUniqueInput = {
    id?: number
  }

  export type Monthly_plannerOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    _count?: Monthly_plannerCountOrderByAggregateInput
    _avg?: Monthly_plannerAvgOrderByAggregateInput
    _max?: Monthly_plannerMaxOrderByAggregateInput
    _min?: Monthly_plannerMinOrderByAggregateInput
    _sum?: Monthly_plannerSumOrderByAggregateInput
  }

  export type Monthly_plannerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Monthly_plannerScalarWhereWithAggregatesInput>
    OR?: Enumerable<Monthly_plannerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Monthly_plannerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    month?: StringWithAggregatesFilter | string
    year?: StringWithAggregatesFilter | string
    notes?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    modified_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Monthly_to_do_listWhereInput = {
    AND?: Enumerable<Monthly_to_do_listWhereInput>
    OR?: Enumerable<Monthly_to_do_listWhereInput>
    NOT?: Enumerable<Monthly_to_do_listWhereInput>
    id?: IntFilter | number
    monthly_planner_id?: IntFilter | number
    data?: StringFilter | string
    Monthly_planner?: XOR<Monthly_plannerRelationFilter, Monthly_plannerWhereInput>
  }

  export type Monthly_to_do_listOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    data?: SortOrder
    Monthly_planner?: Monthly_plannerOrderByWithRelationAndSearchRelevanceInput
    _relevance?: Monthly_to_do_listOrderByRelevanceInput
  }

  export type Monthly_to_do_listWhereUniqueInput = {
    id?: number
  }

  export type Monthly_to_do_listOrderByWithAggregationInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    data?: SortOrder
    _count?: Monthly_to_do_listCountOrderByAggregateInput
    _avg?: Monthly_to_do_listAvgOrderByAggregateInput
    _max?: Monthly_to_do_listMaxOrderByAggregateInput
    _min?: Monthly_to_do_listMinOrderByAggregateInput
    _sum?: Monthly_to_do_listSumOrderByAggregateInput
  }

  export type Monthly_to_do_listScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Monthly_to_do_listScalarWhereWithAggregatesInput>
    OR?: Enumerable<Monthly_to_do_listScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Monthly_to_do_listScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    monthly_planner_id?: IntWithAggregatesFilter | number
    data?: StringWithAggregatesFilter | string
  }

  export type Daily_plannerWhereInput = {
    AND?: Enumerable<Daily_plannerWhereInput>
    OR?: Enumerable<Daily_plannerWhereInput>
    NOT?: Enumerable<Daily_plannerWhereInput>
    id?: IntFilter | number
    monthly_planner_id?: IntFilter | number
    day?: StringFilter | string
    weekday?: StringFilter | string
    notes?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    Monthly_planner?: XOR<Monthly_plannerRelationFilter, Monthly_plannerWhereInput>
    to_do_list?: Daily_to_do_listListRelationFilter
    most_important?: Daily_most_importantListRelationFilter
  }

  export type Daily_plannerOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    day?: SortOrder
    weekday?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    Monthly_planner?: Monthly_plannerOrderByWithRelationAndSearchRelevanceInput
    to_do_list?: Daily_to_do_listOrderByRelationAggregateInput
    most_important?: Daily_most_importantOrderByRelationAggregateInput
    _relevance?: Daily_plannerOrderByRelevanceInput
  }

  export type Daily_plannerWhereUniqueInput = {
    id?: number
  }

  export type Daily_plannerOrderByWithAggregationInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    day?: SortOrder
    weekday?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    _count?: Daily_plannerCountOrderByAggregateInput
    _avg?: Daily_plannerAvgOrderByAggregateInput
    _max?: Daily_plannerMaxOrderByAggregateInput
    _min?: Daily_plannerMinOrderByAggregateInput
    _sum?: Daily_plannerSumOrderByAggregateInput
  }

  export type Daily_plannerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Daily_plannerScalarWhereWithAggregatesInput>
    OR?: Enumerable<Daily_plannerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Daily_plannerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    monthly_planner_id?: IntWithAggregatesFilter | number
    day?: StringWithAggregatesFilter | string
    weekday?: StringWithAggregatesFilter | string
    notes?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    modified_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Daily_to_do_listWhereInput = {
    AND?: Enumerable<Daily_to_do_listWhereInput>
    OR?: Enumerable<Daily_to_do_listWhereInput>
    NOT?: Enumerable<Daily_to_do_listWhereInput>
    id?: IntFilter | number
    daily_planner_id?: IntFilter | number
    data?: StringFilter | string
    Daily_planner?: XOR<Daily_plannerRelationFilter, Daily_plannerWhereInput>
  }

  export type Daily_to_do_listOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
    Daily_planner?: Daily_plannerOrderByWithRelationAndSearchRelevanceInput
    _relevance?: Daily_to_do_listOrderByRelevanceInput
  }

  export type Daily_to_do_listWhereUniqueInput = {
    id?: number
  }

  export type Daily_to_do_listOrderByWithAggregationInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
    _count?: Daily_to_do_listCountOrderByAggregateInput
    _avg?: Daily_to_do_listAvgOrderByAggregateInput
    _max?: Daily_to_do_listMaxOrderByAggregateInput
    _min?: Daily_to_do_listMinOrderByAggregateInput
    _sum?: Daily_to_do_listSumOrderByAggregateInput
  }

  export type Daily_to_do_listScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Daily_to_do_listScalarWhereWithAggregatesInput>
    OR?: Enumerable<Daily_to_do_listScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Daily_to_do_listScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    daily_planner_id?: IntWithAggregatesFilter | number
    data?: StringWithAggregatesFilter | string
  }

  export type Daily_most_importantWhereInput = {
    AND?: Enumerable<Daily_most_importantWhereInput>
    OR?: Enumerable<Daily_most_importantWhereInput>
    NOT?: Enumerable<Daily_most_importantWhereInput>
    id?: IntFilter | number
    daily_planner_id?: IntFilter | number
    data?: StringFilter | string
    Daily_planner?: XOR<Daily_plannerRelationFilter, Daily_plannerWhereInput>
  }

  export type Daily_most_importantOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
    Daily_planner?: Daily_plannerOrderByWithRelationAndSearchRelevanceInput
    _relevance?: Daily_most_importantOrderByRelevanceInput
  }

  export type Daily_most_importantWhereUniqueInput = {
    id?: number
  }

  export type Daily_most_importantOrderByWithAggregationInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
    _count?: Daily_most_importantCountOrderByAggregateInput
    _avg?: Daily_most_importantAvgOrderByAggregateInput
    _max?: Daily_most_importantMaxOrderByAggregateInput
    _min?: Daily_most_importantMinOrderByAggregateInput
    _sum?: Daily_most_importantSumOrderByAggregateInput
  }

  export type Daily_most_importantScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Daily_most_importantScalarWhereWithAggregatesInput>
    OR?: Enumerable<Daily_most_importantScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Daily_most_importantScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    daily_planner_id?: IntWithAggregatesFilter | number
    data?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeCreateNestedManyWithoutUsersInput
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutUserInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeUncheckedCreateNestedManyWithoutUsersInput
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutUserInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUpdateManyWithoutUsersNestedInput
    anime_user_rank?: Anime_user_rankUpdateManyWithoutUserNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUncheckedUpdateManyWithoutUsersNestedInput
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutUserNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id: string
    sid: string
    data: string
    expiresAt: Date | string
  }

  export type SessionUncheckedCreateInput = {
    id: string
    sid: string
    data: string
    expiresAt: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id: string
    sid: string
    data: string
    expiresAt: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeCreateInput = {
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    users?: UserCreateNestedManyWithoutAnimeInput
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutAnimeInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateInput = {
    id?: number
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAnimeInput
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutAnimeInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAnimeNestedInput
    anime_user_rank?: Anime_user_rankUpdateManyWithoutAnimeNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAnimeNestedInput
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutAnimeNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeCreateManyInput = {
    id?: number
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type AnimeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnimeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_rankCreateInput = {
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutAnime_user_rankInput
    anime: AnimeCreateNestedOneWithoutAnime_user_rankInput
  }

  export type Anime_user_rankUncheckedCreateInput = {
    id?: number
    user_id: number
    anime_id: number
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_rankUpdateInput = {
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAnime_user_rankNestedInput
    anime?: AnimeUpdateOneRequiredWithoutAnime_user_rankNestedInput
  }

  export type Anime_user_rankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_rankCreateManyInput = {
    id?: number
    user_id: number
    anime_id: number
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_rankUpdateManyMutationInput = {
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_rankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_plannedCreateInput = {
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutAnime_user_plannedInput
    anime: AnimeCreateNestedOneWithoutAnime_user_plannedInput
  }

  export type Anime_user_plannedUncheckedCreateInput = {
    id?: number
    user_id: number
    anime_id: number
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_plannedUpdateInput = {
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAnime_user_plannedNestedInput
    anime?: AnimeUpdateOneRequiredWithoutAnime_user_plannedNestedInput
  }

  export type Anime_user_plannedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_plannedCreateManyInput = {
    id?: number
    user_id: number
    anime_id: number
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_plannedUpdateManyMutationInput = {
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_plannedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Monthly_plannerCreateInput = {
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutMonthly_plannerInput
    to_do_list?: Monthly_to_do_listCreateNestedManyWithoutMonthly_plannerInput
    daily_planner?: Daily_plannerCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerUncheckedCreateInput = {
    id?: number
    user_id: number
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Monthly_to_do_listUncheckedCreateNestedManyWithoutMonthly_plannerInput
    daily_planner?: Daily_plannerUncheckedCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerUpdateInput = {
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutMonthly_plannerNestedInput
    to_do_list?: Monthly_to_do_listUpdateManyWithoutMonthly_plannerNestedInput
    daily_planner?: Daily_plannerUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Monthly_to_do_listUncheckedUpdateManyWithoutMonthly_plannerNestedInput
    daily_planner?: Daily_plannerUncheckedUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerCreateManyInput = {
    id?: number
    user_id: number
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Monthly_plannerUpdateManyMutationInput = {
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Monthly_plannerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Monthly_to_do_listCreateInput = {
    data?: string
    Monthly_planner: Monthly_plannerCreateNestedOneWithoutTo_do_listInput
  }

  export type Monthly_to_do_listUncheckedCreateInput = {
    id?: number
    monthly_planner_id: number
    data?: string
  }

  export type Monthly_to_do_listUpdateInput = {
    data?: StringFieldUpdateOperationsInput | string
    Monthly_planner?: Monthly_plannerUpdateOneRequiredWithoutTo_do_listNestedInput
  }

  export type Monthly_to_do_listUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    monthly_planner_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Monthly_to_do_listCreateManyInput = {
    id?: number
    monthly_planner_id: number
    data?: string
  }

  export type Monthly_to_do_listUpdateManyMutationInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Monthly_to_do_listUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    monthly_planner_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_plannerCreateInput = {
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    Monthly_planner: Monthly_plannerCreateNestedOneWithoutDaily_plannerInput
    to_do_list?: Daily_to_do_listCreateNestedManyWithoutDaily_plannerInput
    most_important?: Daily_most_importantCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerUncheckedCreateInput = {
    id?: number
    monthly_planner_id: number
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Daily_to_do_listUncheckedCreateNestedManyWithoutDaily_plannerInput
    most_important?: Daily_most_importantUncheckedCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerUpdateInput = {
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Monthly_planner?: Monthly_plannerUpdateOneRequiredWithoutDaily_plannerNestedInput
    to_do_list?: Daily_to_do_listUpdateManyWithoutDaily_plannerNestedInput
    most_important?: Daily_most_importantUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    monthly_planner_id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Daily_to_do_listUncheckedUpdateManyWithoutDaily_plannerNestedInput
    most_important?: Daily_most_importantUncheckedUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerCreateManyInput = {
    id?: number
    monthly_planner_id: number
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Daily_plannerUpdateManyMutationInput = {
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Daily_plannerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    monthly_planner_id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Daily_to_do_listCreateInput = {
    data?: string
    Daily_planner: Daily_plannerCreateNestedOneWithoutTo_do_listInput
  }

  export type Daily_to_do_listUncheckedCreateInput = {
    id?: number
    daily_planner_id: number
    data?: string
  }

  export type Daily_to_do_listUpdateInput = {
    data?: StringFieldUpdateOperationsInput | string
    Daily_planner?: Daily_plannerUpdateOneRequiredWithoutTo_do_listNestedInput
  }

  export type Daily_to_do_listUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    daily_planner_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_to_do_listCreateManyInput = {
    id?: number
    daily_planner_id: number
    data?: string
  }

  export type Daily_to_do_listUpdateManyMutationInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_to_do_listUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    daily_planner_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_most_importantCreateInput = {
    data?: string
    Daily_planner: Daily_plannerCreateNestedOneWithoutMost_importantInput
  }

  export type Daily_most_importantUncheckedCreateInput = {
    id?: number
    daily_planner_id: number
    data?: string
  }

  export type Daily_most_importantUpdateInput = {
    data?: StringFieldUpdateOperationsInput | string
    Daily_planner?: Daily_plannerUpdateOneRequiredWithoutMost_importantNestedInput
  }

  export type Daily_most_importantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    daily_planner_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_most_importantCreateManyInput = {
    id?: number
    daily_planner_id: number
    data?: string
  }

  export type Daily_most_importantUpdateManyMutationInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_most_importantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    daily_planner_id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type AnimeListRelationFilter = {
    every?: AnimeWhereInput
    some?: AnimeWhereInput
    none?: AnimeWhereInput
  }

  export type Anime_user_rankListRelationFilter = {
    every?: Anime_user_rankWhereInput
    some?: Anime_user_rankWhereInput
    none?: Anime_user_rankWhereInput
  }

  export type Anime_user_plannedListRelationFilter = {
    every?: Anime_user_plannedWhereInput
    some?: Anime_user_plannedWhereInput
    none?: Anime_user_plannedWhereInput
  }

  export type Monthly_plannerListRelationFilter = {
    every?: Monthly_plannerWhereInput
    some?: Monthly_plannerWhereInput
    none?: Monthly_plannerWhereInput
  }

  export type AnimeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Anime_user_rankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Anime_user_plannedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Monthly_plannerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: Enumerable<UserOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    user_pic?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    user_pic?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
    user_pic?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SessionOrderByRelevanceInput = {
    fields: Enumerable<SessionOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sid?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sid?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sid?: SortOrder
    data?: SortOrder
    expiresAt?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnimeOrderByRelevanceInput = {
    fields: Enumerable<AnimeOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type AnimeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type AnimeAvgOrderByAggregateInput = {
    id?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
  }

  export type AnimeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type AnimeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type AnimeSumOrderByAggregateInput = {
    id?: SortOrder
    avg_rank?: SortOrder
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AnimeRelationFilter = {
    is?: AnimeWhereInput
    isNot?: AnimeWhereInput
  }

  export type Anime_user_rankOrderByRelevanceInput = {
    fields: Enumerable<Anime_user_rankOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type Anime_user_rankCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Anime_user_rankAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
  }

  export type Anime_user_rankMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Anime_user_rankMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    anime_pic?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Anime_user_rankSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type Anime_user_plannedCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    isPlanned?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Anime_user_plannedAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
  }

  export type Anime_user_plannedMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    isPlanned?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Anime_user_plannedMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
    isPlanned?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Anime_user_plannedSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    anime_id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type Monthly_to_do_listListRelationFilter = {
    every?: Monthly_to_do_listWhereInput
    some?: Monthly_to_do_listWhereInput
    none?: Monthly_to_do_listWhereInput
  }

  export type Daily_plannerListRelationFilter = {
    every?: Daily_plannerWhereInput
    some?: Daily_plannerWhereInput
    none?: Daily_plannerWhereInput
  }

  export type Monthly_to_do_listOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Daily_plannerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Monthly_plannerOrderByRelevanceInput = {
    fields: Enumerable<Monthly_plannerOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type Monthly_plannerCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Monthly_plannerAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Monthly_plannerMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Monthly_plannerMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Monthly_plannerSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Monthly_plannerRelationFilter = {
    is?: Monthly_plannerWhereInput
    isNot?: Monthly_plannerWhereInput
  }

  export type Monthly_to_do_listOrderByRelevanceInput = {
    fields: Enumerable<Monthly_to_do_listOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type Monthly_to_do_listCountOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Monthly_to_do_listAvgOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
  }

  export type Monthly_to_do_listMaxOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Monthly_to_do_listMinOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Monthly_to_do_listSumOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
  }

  export type Daily_to_do_listListRelationFilter = {
    every?: Daily_to_do_listWhereInput
    some?: Daily_to_do_listWhereInput
    none?: Daily_to_do_listWhereInput
  }

  export type Daily_most_importantListRelationFilter = {
    every?: Daily_most_importantWhereInput
    some?: Daily_most_importantWhereInput
    none?: Daily_most_importantWhereInput
  }

  export type Daily_to_do_listOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Daily_most_importantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Daily_plannerOrderByRelevanceInput = {
    fields: Enumerable<Daily_plannerOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type Daily_plannerCountOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    day?: SortOrder
    weekday?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Daily_plannerAvgOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
  }

  export type Daily_plannerMaxOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    day?: SortOrder
    weekday?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Daily_plannerMinOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
    day?: SortOrder
    weekday?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    modified_at?: SortOrder
  }

  export type Daily_plannerSumOrderByAggregateInput = {
    id?: SortOrder
    monthly_planner_id?: SortOrder
  }

  export type Daily_plannerRelationFilter = {
    is?: Daily_plannerWhereInput
    isNot?: Daily_plannerWhereInput
  }

  export type Daily_to_do_listOrderByRelevanceInput = {
    fields: Enumerable<Daily_to_do_listOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type Daily_to_do_listCountOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Daily_to_do_listAvgOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
  }

  export type Daily_to_do_listMaxOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Daily_to_do_listMinOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Daily_to_do_listSumOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
  }

  export type Daily_most_importantOrderByRelevanceInput = {
    fields: Enumerable<Daily_most_importantOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type Daily_most_importantCountOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Daily_most_importantAvgOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
  }

  export type Daily_most_importantMaxOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Daily_most_importantMinOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
    data?: SortOrder
  }

  export type Daily_most_importantSumOrderByAggregateInput = {
    id?: SortOrder
    daily_planner_id?: SortOrder
  }

  export type AnimeCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<AnimeCreateWithoutUsersInput>, Enumerable<AnimeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AnimeCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<AnimeWhereUniqueInput>
  }

  export type Anime_user_rankCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutUserInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutUserInput>
    createMany?: Anime_user_rankCreateManyUserInputEnvelope
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
  }

  export type Anime_user_plannedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutUserInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutUserInput>
    createMany?: Anime_user_plannedCreateManyUserInputEnvelope
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
  }

  export type Monthly_plannerCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Monthly_plannerCreateWithoutUserInput>, Enumerable<Monthly_plannerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Monthly_plannerCreateOrConnectWithoutUserInput>
    createMany?: Monthly_plannerCreateManyUserInputEnvelope
    connect?: Enumerable<Monthly_plannerWhereUniqueInput>
  }

  export type AnimeUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<AnimeCreateWithoutUsersInput>, Enumerable<AnimeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AnimeCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<AnimeWhereUniqueInput>
  }

  export type Anime_user_rankUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutUserInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutUserInput>
    createMany?: Anime_user_rankCreateManyUserInputEnvelope
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
  }

  export type Anime_user_plannedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutUserInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutUserInput>
    createMany?: Anime_user_plannedCreateManyUserInputEnvelope
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
  }

  export type Monthly_plannerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Monthly_plannerCreateWithoutUserInput>, Enumerable<Monthly_plannerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Monthly_plannerCreateOrConnectWithoutUserInput>
    createMany?: Monthly_plannerCreateManyUserInputEnvelope
    connect?: Enumerable<Monthly_plannerWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AnimeUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<AnimeCreateWithoutUsersInput>, Enumerable<AnimeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AnimeCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<AnimeUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<AnimeWhereUniqueInput>
    disconnect?: Enumerable<AnimeWhereUniqueInput>
    delete?: Enumerable<AnimeWhereUniqueInput>
    connect?: Enumerable<AnimeWhereUniqueInput>
    update?: Enumerable<AnimeUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<AnimeUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<AnimeScalarWhereInput>
  }

  export type Anime_user_rankUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutUserInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Anime_user_rankUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Anime_user_rankCreateManyUserInputEnvelope
    set?: Enumerable<Anime_user_rankWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_rankWhereUniqueInput>
    delete?: Enumerable<Anime_user_rankWhereUniqueInput>
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
    update?: Enumerable<Anime_user_rankUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Anime_user_rankUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Anime_user_rankScalarWhereInput>
  }

  export type Anime_user_plannedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutUserInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Anime_user_plannedUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Anime_user_plannedCreateManyUserInputEnvelope
    set?: Enumerable<Anime_user_plannedWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    delete?: Enumerable<Anime_user_plannedWhereUniqueInput>
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    update?: Enumerable<Anime_user_plannedUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Anime_user_plannedUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Anime_user_plannedScalarWhereInput>
  }

  export type Monthly_plannerUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Monthly_plannerCreateWithoutUserInput>, Enumerable<Monthly_plannerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Monthly_plannerCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Monthly_plannerUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Monthly_plannerCreateManyUserInputEnvelope
    set?: Enumerable<Monthly_plannerWhereUniqueInput>
    disconnect?: Enumerable<Monthly_plannerWhereUniqueInput>
    delete?: Enumerable<Monthly_plannerWhereUniqueInput>
    connect?: Enumerable<Monthly_plannerWhereUniqueInput>
    update?: Enumerable<Monthly_plannerUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Monthly_plannerUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Monthly_plannerScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AnimeUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<AnimeCreateWithoutUsersInput>, Enumerable<AnimeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AnimeCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<AnimeUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<AnimeWhereUniqueInput>
    disconnect?: Enumerable<AnimeWhereUniqueInput>
    delete?: Enumerable<AnimeWhereUniqueInput>
    connect?: Enumerable<AnimeWhereUniqueInput>
    update?: Enumerable<AnimeUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<AnimeUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<AnimeScalarWhereInput>
  }

  export type Anime_user_rankUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutUserInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Anime_user_rankUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Anime_user_rankCreateManyUserInputEnvelope
    set?: Enumerable<Anime_user_rankWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_rankWhereUniqueInput>
    delete?: Enumerable<Anime_user_rankWhereUniqueInput>
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
    update?: Enumerable<Anime_user_rankUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Anime_user_rankUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Anime_user_rankScalarWhereInput>
  }

  export type Anime_user_plannedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutUserInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Anime_user_plannedUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Anime_user_plannedCreateManyUserInputEnvelope
    set?: Enumerable<Anime_user_plannedWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    delete?: Enumerable<Anime_user_plannedWhereUniqueInput>
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    update?: Enumerable<Anime_user_plannedUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Anime_user_plannedUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Anime_user_plannedScalarWhereInput>
  }

  export type Monthly_plannerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Monthly_plannerCreateWithoutUserInput>, Enumerable<Monthly_plannerUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Monthly_plannerCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Monthly_plannerUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Monthly_plannerCreateManyUserInputEnvelope
    set?: Enumerable<Monthly_plannerWhereUniqueInput>
    disconnect?: Enumerable<Monthly_plannerWhereUniqueInput>
    delete?: Enumerable<Monthly_plannerWhereUniqueInput>
    connect?: Enumerable<Monthly_plannerWhereUniqueInput>
    update?: Enumerable<Monthly_plannerUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Monthly_plannerUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Monthly_plannerScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnimeInput>, Enumerable<UserUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnimeInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type Anime_user_rankCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutAnimeInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutAnimeInput>
    createMany?: Anime_user_rankCreateManyAnimeInputEnvelope
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
  }

  export type Anime_user_plannedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutAnimeInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutAnimeInput>
    createMany?: Anime_user_plannedCreateManyAnimeInputEnvelope
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnimeInput>, Enumerable<UserUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnimeInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type Anime_user_rankUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutAnimeInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutAnimeInput>
    createMany?: Anime_user_rankCreateManyAnimeInputEnvelope
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
  }

  export type Anime_user_plannedUncheckedCreateNestedManyWithoutAnimeInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutAnimeInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutAnimeInput>
    createMany?: Anime_user_plannedCreateManyAnimeInputEnvelope
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnimeInput>, Enumerable<UserUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAnimeInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type Anime_user_rankUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutAnimeInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<Anime_user_rankUpsertWithWhereUniqueWithoutAnimeInput>
    createMany?: Anime_user_rankCreateManyAnimeInputEnvelope
    set?: Enumerable<Anime_user_rankWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_rankWhereUniqueInput>
    delete?: Enumerable<Anime_user_rankWhereUniqueInput>
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
    update?: Enumerable<Anime_user_rankUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<Anime_user_rankUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<Anime_user_rankScalarWhereInput>
  }

  export type Anime_user_plannedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutAnimeInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<Anime_user_plannedUpsertWithWhereUniqueWithoutAnimeInput>
    createMany?: Anime_user_plannedCreateManyAnimeInputEnvelope
    set?: Enumerable<Anime_user_plannedWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    delete?: Enumerable<Anime_user_plannedWhereUniqueInput>
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    update?: Enumerable<Anime_user_plannedUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<Anime_user_plannedUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<Anime_user_plannedScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnimeInput>, Enumerable<UserUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAnimeInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type Anime_user_rankUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<Anime_user_rankCreateWithoutAnimeInput>, Enumerable<Anime_user_rankUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_rankCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<Anime_user_rankUpsertWithWhereUniqueWithoutAnimeInput>
    createMany?: Anime_user_rankCreateManyAnimeInputEnvelope
    set?: Enumerable<Anime_user_rankWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_rankWhereUniqueInput>
    delete?: Enumerable<Anime_user_rankWhereUniqueInput>
    connect?: Enumerable<Anime_user_rankWhereUniqueInput>
    update?: Enumerable<Anime_user_rankUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<Anime_user_rankUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<Anime_user_rankScalarWhereInput>
  }

  export type Anime_user_plannedUncheckedUpdateManyWithoutAnimeNestedInput = {
    create?: XOR<Enumerable<Anime_user_plannedCreateWithoutAnimeInput>, Enumerable<Anime_user_plannedUncheckedCreateWithoutAnimeInput>>
    connectOrCreate?: Enumerable<Anime_user_plannedCreateOrConnectWithoutAnimeInput>
    upsert?: Enumerable<Anime_user_plannedUpsertWithWhereUniqueWithoutAnimeInput>
    createMany?: Anime_user_plannedCreateManyAnimeInputEnvelope
    set?: Enumerable<Anime_user_plannedWhereUniqueInput>
    disconnect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    delete?: Enumerable<Anime_user_plannedWhereUniqueInput>
    connect?: Enumerable<Anime_user_plannedWhereUniqueInput>
    update?: Enumerable<Anime_user_plannedUpdateWithWhereUniqueWithoutAnimeInput>
    updateMany?: Enumerable<Anime_user_plannedUpdateManyWithWhereWithoutAnimeInput>
    deleteMany?: Enumerable<Anime_user_plannedScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAnime_user_rankInput = {
    create?: XOR<UserCreateWithoutAnime_user_rankInput, UserUncheckedCreateWithoutAnime_user_rankInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnime_user_rankInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutAnime_user_rankInput = {
    create?: XOR<AnimeCreateWithoutAnime_user_rankInput, AnimeUncheckedCreateWithoutAnime_user_rankInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutAnime_user_rankInput
    connect?: AnimeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAnime_user_rankNestedInput = {
    create?: XOR<UserCreateWithoutAnime_user_rankInput, UserUncheckedCreateWithoutAnime_user_rankInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnime_user_rankInput
    upsert?: UserUpsertWithoutAnime_user_rankInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAnime_user_rankInput, UserUncheckedUpdateWithoutAnime_user_rankInput>
  }

  export type AnimeUpdateOneRequiredWithoutAnime_user_rankNestedInput = {
    create?: XOR<AnimeCreateWithoutAnime_user_rankInput, AnimeUncheckedCreateWithoutAnime_user_rankInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutAnime_user_rankInput
    upsert?: AnimeUpsertWithoutAnime_user_rankInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<AnimeUpdateWithoutAnime_user_rankInput, AnimeUncheckedUpdateWithoutAnime_user_rankInput>
  }

  export type UserCreateNestedOneWithoutAnime_user_plannedInput = {
    create?: XOR<UserCreateWithoutAnime_user_plannedInput, UserUncheckedCreateWithoutAnime_user_plannedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnime_user_plannedInput
    connect?: UserWhereUniqueInput
  }

  export type AnimeCreateNestedOneWithoutAnime_user_plannedInput = {
    create?: XOR<AnimeCreateWithoutAnime_user_plannedInput, AnimeUncheckedCreateWithoutAnime_user_plannedInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutAnime_user_plannedInput
    connect?: AnimeWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutAnime_user_plannedNestedInput = {
    create?: XOR<UserCreateWithoutAnime_user_plannedInput, UserUncheckedCreateWithoutAnime_user_plannedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnime_user_plannedInput
    upsert?: UserUpsertWithoutAnime_user_plannedInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAnime_user_plannedInput, UserUncheckedUpdateWithoutAnime_user_plannedInput>
  }

  export type AnimeUpdateOneRequiredWithoutAnime_user_plannedNestedInput = {
    create?: XOR<AnimeCreateWithoutAnime_user_plannedInput, AnimeUncheckedCreateWithoutAnime_user_plannedInput>
    connectOrCreate?: AnimeCreateOrConnectWithoutAnime_user_plannedInput
    upsert?: AnimeUpsertWithoutAnime_user_plannedInput
    connect?: AnimeWhereUniqueInput
    update?: XOR<AnimeUpdateWithoutAnime_user_plannedInput, AnimeUncheckedUpdateWithoutAnime_user_plannedInput>
  }

  export type UserCreateNestedOneWithoutMonthly_plannerInput = {
    create?: XOR<UserCreateWithoutMonthly_plannerInput, UserUncheckedCreateWithoutMonthly_plannerInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthly_plannerInput
    connect?: UserWhereUniqueInput
  }

  export type Monthly_to_do_listCreateNestedManyWithoutMonthly_plannerInput = {
    create?: XOR<Enumerable<Monthly_to_do_listCreateWithoutMonthly_plannerInput>, Enumerable<Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Monthly_to_do_listCreateOrConnectWithoutMonthly_plannerInput>
    createMany?: Monthly_to_do_listCreateManyMonthly_plannerInputEnvelope
    connect?: Enumerable<Monthly_to_do_listWhereUniqueInput>
  }

  export type Daily_plannerCreateNestedManyWithoutMonthly_plannerInput = {
    create?: XOR<Enumerable<Daily_plannerCreateWithoutMonthly_plannerInput>, Enumerable<Daily_plannerUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Daily_plannerCreateOrConnectWithoutMonthly_plannerInput>
    createMany?: Daily_plannerCreateManyMonthly_plannerInputEnvelope
    connect?: Enumerable<Daily_plannerWhereUniqueInput>
  }

  export type Monthly_to_do_listUncheckedCreateNestedManyWithoutMonthly_plannerInput = {
    create?: XOR<Enumerable<Monthly_to_do_listCreateWithoutMonthly_plannerInput>, Enumerable<Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Monthly_to_do_listCreateOrConnectWithoutMonthly_plannerInput>
    createMany?: Monthly_to_do_listCreateManyMonthly_plannerInputEnvelope
    connect?: Enumerable<Monthly_to_do_listWhereUniqueInput>
  }

  export type Daily_plannerUncheckedCreateNestedManyWithoutMonthly_plannerInput = {
    create?: XOR<Enumerable<Daily_plannerCreateWithoutMonthly_plannerInput>, Enumerable<Daily_plannerUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Daily_plannerCreateOrConnectWithoutMonthly_plannerInput>
    createMany?: Daily_plannerCreateManyMonthly_plannerInputEnvelope
    connect?: Enumerable<Daily_plannerWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutMonthly_plannerNestedInput = {
    create?: XOR<UserCreateWithoutMonthly_plannerInput, UserUncheckedCreateWithoutMonthly_plannerInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthly_plannerInput
    upsert?: UserUpsertWithoutMonthly_plannerInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMonthly_plannerInput, UserUncheckedUpdateWithoutMonthly_plannerInput>
  }

  export type Monthly_to_do_listUpdateManyWithoutMonthly_plannerNestedInput = {
    create?: XOR<Enumerable<Monthly_to_do_listCreateWithoutMonthly_plannerInput>, Enumerable<Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Monthly_to_do_listCreateOrConnectWithoutMonthly_plannerInput>
    upsert?: Enumerable<Monthly_to_do_listUpsertWithWhereUniqueWithoutMonthly_plannerInput>
    createMany?: Monthly_to_do_listCreateManyMonthly_plannerInputEnvelope
    set?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    disconnect?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    delete?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    connect?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    update?: Enumerable<Monthly_to_do_listUpdateWithWhereUniqueWithoutMonthly_plannerInput>
    updateMany?: Enumerable<Monthly_to_do_listUpdateManyWithWhereWithoutMonthly_plannerInput>
    deleteMany?: Enumerable<Monthly_to_do_listScalarWhereInput>
  }

  export type Daily_plannerUpdateManyWithoutMonthly_plannerNestedInput = {
    create?: XOR<Enumerable<Daily_plannerCreateWithoutMonthly_plannerInput>, Enumerable<Daily_plannerUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Daily_plannerCreateOrConnectWithoutMonthly_plannerInput>
    upsert?: Enumerable<Daily_plannerUpsertWithWhereUniqueWithoutMonthly_plannerInput>
    createMany?: Daily_plannerCreateManyMonthly_plannerInputEnvelope
    set?: Enumerable<Daily_plannerWhereUniqueInput>
    disconnect?: Enumerable<Daily_plannerWhereUniqueInput>
    delete?: Enumerable<Daily_plannerWhereUniqueInput>
    connect?: Enumerable<Daily_plannerWhereUniqueInput>
    update?: Enumerable<Daily_plannerUpdateWithWhereUniqueWithoutMonthly_plannerInput>
    updateMany?: Enumerable<Daily_plannerUpdateManyWithWhereWithoutMonthly_plannerInput>
    deleteMany?: Enumerable<Daily_plannerScalarWhereInput>
  }

  export type Monthly_to_do_listUncheckedUpdateManyWithoutMonthly_plannerNestedInput = {
    create?: XOR<Enumerable<Monthly_to_do_listCreateWithoutMonthly_plannerInput>, Enumerable<Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Monthly_to_do_listCreateOrConnectWithoutMonthly_plannerInput>
    upsert?: Enumerable<Monthly_to_do_listUpsertWithWhereUniqueWithoutMonthly_plannerInput>
    createMany?: Monthly_to_do_listCreateManyMonthly_plannerInputEnvelope
    set?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    disconnect?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    delete?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    connect?: Enumerable<Monthly_to_do_listWhereUniqueInput>
    update?: Enumerable<Monthly_to_do_listUpdateWithWhereUniqueWithoutMonthly_plannerInput>
    updateMany?: Enumerable<Monthly_to_do_listUpdateManyWithWhereWithoutMonthly_plannerInput>
    deleteMany?: Enumerable<Monthly_to_do_listScalarWhereInput>
  }

  export type Daily_plannerUncheckedUpdateManyWithoutMonthly_plannerNestedInput = {
    create?: XOR<Enumerable<Daily_plannerCreateWithoutMonthly_plannerInput>, Enumerable<Daily_plannerUncheckedCreateWithoutMonthly_plannerInput>>
    connectOrCreate?: Enumerable<Daily_plannerCreateOrConnectWithoutMonthly_plannerInput>
    upsert?: Enumerable<Daily_plannerUpsertWithWhereUniqueWithoutMonthly_plannerInput>
    createMany?: Daily_plannerCreateManyMonthly_plannerInputEnvelope
    set?: Enumerable<Daily_plannerWhereUniqueInput>
    disconnect?: Enumerable<Daily_plannerWhereUniqueInput>
    delete?: Enumerable<Daily_plannerWhereUniqueInput>
    connect?: Enumerable<Daily_plannerWhereUniqueInput>
    update?: Enumerable<Daily_plannerUpdateWithWhereUniqueWithoutMonthly_plannerInput>
    updateMany?: Enumerable<Daily_plannerUpdateManyWithWhereWithoutMonthly_plannerInput>
    deleteMany?: Enumerable<Daily_plannerScalarWhereInput>
  }

  export type Monthly_plannerCreateNestedOneWithoutTo_do_listInput = {
    create?: XOR<Monthly_plannerCreateWithoutTo_do_listInput, Monthly_plannerUncheckedCreateWithoutTo_do_listInput>
    connectOrCreate?: Monthly_plannerCreateOrConnectWithoutTo_do_listInput
    connect?: Monthly_plannerWhereUniqueInput
  }

  export type Monthly_plannerUpdateOneRequiredWithoutTo_do_listNestedInput = {
    create?: XOR<Monthly_plannerCreateWithoutTo_do_listInput, Monthly_plannerUncheckedCreateWithoutTo_do_listInput>
    connectOrCreate?: Monthly_plannerCreateOrConnectWithoutTo_do_listInput
    upsert?: Monthly_plannerUpsertWithoutTo_do_listInput
    connect?: Monthly_plannerWhereUniqueInput
    update?: XOR<Monthly_plannerUpdateWithoutTo_do_listInput, Monthly_plannerUncheckedUpdateWithoutTo_do_listInput>
  }

  export type Monthly_plannerCreateNestedOneWithoutDaily_plannerInput = {
    create?: XOR<Monthly_plannerCreateWithoutDaily_plannerInput, Monthly_plannerUncheckedCreateWithoutDaily_plannerInput>
    connectOrCreate?: Monthly_plannerCreateOrConnectWithoutDaily_plannerInput
    connect?: Monthly_plannerWhereUniqueInput
  }

  export type Daily_to_do_listCreateNestedManyWithoutDaily_plannerInput = {
    create?: XOR<Enumerable<Daily_to_do_listCreateWithoutDaily_plannerInput>, Enumerable<Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_to_do_listCreateOrConnectWithoutDaily_plannerInput>
    createMany?: Daily_to_do_listCreateManyDaily_plannerInputEnvelope
    connect?: Enumerable<Daily_to_do_listWhereUniqueInput>
  }

  export type Daily_most_importantCreateNestedManyWithoutDaily_plannerInput = {
    create?: XOR<Enumerable<Daily_most_importantCreateWithoutDaily_plannerInput>, Enumerable<Daily_most_importantUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_most_importantCreateOrConnectWithoutDaily_plannerInput>
    createMany?: Daily_most_importantCreateManyDaily_plannerInputEnvelope
    connect?: Enumerable<Daily_most_importantWhereUniqueInput>
  }

  export type Daily_to_do_listUncheckedCreateNestedManyWithoutDaily_plannerInput = {
    create?: XOR<Enumerable<Daily_to_do_listCreateWithoutDaily_plannerInput>, Enumerable<Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_to_do_listCreateOrConnectWithoutDaily_plannerInput>
    createMany?: Daily_to_do_listCreateManyDaily_plannerInputEnvelope
    connect?: Enumerable<Daily_to_do_listWhereUniqueInput>
  }

  export type Daily_most_importantUncheckedCreateNestedManyWithoutDaily_plannerInput = {
    create?: XOR<Enumerable<Daily_most_importantCreateWithoutDaily_plannerInput>, Enumerable<Daily_most_importantUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_most_importantCreateOrConnectWithoutDaily_plannerInput>
    createMany?: Daily_most_importantCreateManyDaily_plannerInputEnvelope
    connect?: Enumerable<Daily_most_importantWhereUniqueInput>
  }

  export type Monthly_plannerUpdateOneRequiredWithoutDaily_plannerNestedInput = {
    create?: XOR<Monthly_plannerCreateWithoutDaily_plannerInput, Monthly_plannerUncheckedCreateWithoutDaily_plannerInput>
    connectOrCreate?: Monthly_plannerCreateOrConnectWithoutDaily_plannerInput
    upsert?: Monthly_plannerUpsertWithoutDaily_plannerInput
    connect?: Monthly_plannerWhereUniqueInput
    update?: XOR<Monthly_plannerUpdateWithoutDaily_plannerInput, Monthly_plannerUncheckedUpdateWithoutDaily_plannerInput>
  }

  export type Daily_to_do_listUpdateManyWithoutDaily_plannerNestedInput = {
    create?: XOR<Enumerable<Daily_to_do_listCreateWithoutDaily_plannerInput>, Enumerable<Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_to_do_listCreateOrConnectWithoutDaily_plannerInput>
    upsert?: Enumerable<Daily_to_do_listUpsertWithWhereUniqueWithoutDaily_plannerInput>
    createMany?: Daily_to_do_listCreateManyDaily_plannerInputEnvelope
    set?: Enumerable<Daily_to_do_listWhereUniqueInput>
    disconnect?: Enumerable<Daily_to_do_listWhereUniqueInput>
    delete?: Enumerable<Daily_to_do_listWhereUniqueInput>
    connect?: Enumerable<Daily_to_do_listWhereUniqueInput>
    update?: Enumerable<Daily_to_do_listUpdateWithWhereUniqueWithoutDaily_plannerInput>
    updateMany?: Enumerable<Daily_to_do_listUpdateManyWithWhereWithoutDaily_plannerInput>
    deleteMany?: Enumerable<Daily_to_do_listScalarWhereInput>
  }

  export type Daily_most_importantUpdateManyWithoutDaily_plannerNestedInput = {
    create?: XOR<Enumerable<Daily_most_importantCreateWithoutDaily_plannerInput>, Enumerable<Daily_most_importantUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_most_importantCreateOrConnectWithoutDaily_plannerInput>
    upsert?: Enumerable<Daily_most_importantUpsertWithWhereUniqueWithoutDaily_plannerInput>
    createMany?: Daily_most_importantCreateManyDaily_plannerInputEnvelope
    set?: Enumerable<Daily_most_importantWhereUniqueInput>
    disconnect?: Enumerable<Daily_most_importantWhereUniqueInput>
    delete?: Enumerable<Daily_most_importantWhereUniqueInput>
    connect?: Enumerable<Daily_most_importantWhereUniqueInput>
    update?: Enumerable<Daily_most_importantUpdateWithWhereUniqueWithoutDaily_plannerInput>
    updateMany?: Enumerable<Daily_most_importantUpdateManyWithWhereWithoutDaily_plannerInput>
    deleteMany?: Enumerable<Daily_most_importantScalarWhereInput>
  }

  export type Daily_to_do_listUncheckedUpdateManyWithoutDaily_plannerNestedInput = {
    create?: XOR<Enumerable<Daily_to_do_listCreateWithoutDaily_plannerInput>, Enumerable<Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_to_do_listCreateOrConnectWithoutDaily_plannerInput>
    upsert?: Enumerable<Daily_to_do_listUpsertWithWhereUniqueWithoutDaily_plannerInput>
    createMany?: Daily_to_do_listCreateManyDaily_plannerInputEnvelope
    set?: Enumerable<Daily_to_do_listWhereUniqueInput>
    disconnect?: Enumerable<Daily_to_do_listWhereUniqueInput>
    delete?: Enumerable<Daily_to_do_listWhereUniqueInput>
    connect?: Enumerable<Daily_to_do_listWhereUniqueInput>
    update?: Enumerable<Daily_to_do_listUpdateWithWhereUniqueWithoutDaily_plannerInput>
    updateMany?: Enumerable<Daily_to_do_listUpdateManyWithWhereWithoutDaily_plannerInput>
    deleteMany?: Enumerable<Daily_to_do_listScalarWhereInput>
  }

  export type Daily_most_importantUncheckedUpdateManyWithoutDaily_plannerNestedInput = {
    create?: XOR<Enumerable<Daily_most_importantCreateWithoutDaily_plannerInput>, Enumerable<Daily_most_importantUncheckedCreateWithoutDaily_plannerInput>>
    connectOrCreate?: Enumerable<Daily_most_importantCreateOrConnectWithoutDaily_plannerInput>
    upsert?: Enumerable<Daily_most_importantUpsertWithWhereUniqueWithoutDaily_plannerInput>
    createMany?: Daily_most_importantCreateManyDaily_plannerInputEnvelope
    set?: Enumerable<Daily_most_importantWhereUniqueInput>
    disconnect?: Enumerable<Daily_most_importantWhereUniqueInput>
    delete?: Enumerable<Daily_most_importantWhereUniqueInput>
    connect?: Enumerable<Daily_most_importantWhereUniqueInput>
    update?: Enumerable<Daily_most_importantUpdateWithWhereUniqueWithoutDaily_plannerInput>
    updateMany?: Enumerable<Daily_most_importantUpdateManyWithWhereWithoutDaily_plannerInput>
    deleteMany?: Enumerable<Daily_most_importantScalarWhereInput>
  }

  export type Daily_plannerCreateNestedOneWithoutTo_do_listInput = {
    create?: XOR<Daily_plannerCreateWithoutTo_do_listInput, Daily_plannerUncheckedCreateWithoutTo_do_listInput>
    connectOrCreate?: Daily_plannerCreateOrConnectWithoutTo_do_listInput
    connect?: Daily_plannerWhereUniqueInput
  }

  export type Daily_plannerUpdateOneRequiredWithoutTo_do_listNestedInput = {
    create?: XOR<Daily_plannerCreateWithoutTo_do_listInput, Daily_plannerUncheckedCreateWithoutTo_do_listInput>
    connectOrCreate?: Daily_plannerCreateOrConnectWithoutTo_do_listInput
    upsert?: Daily_plannerUpsertWithoutTo_do_listInput
    connect?: Daily_plannerWhereUniqueInput
    update?: XOR<Daily_plannerUpdateWithoutTo_do_listInput, Daily_plannerUncheckedUpdateWithoutTo_do_listInput>
  }

  export type Daily_plannerCreateNestedOneWithoutMost_importantInput = {
    create?: XOR<Daily_plannerCreateWithoutMost_importantInput, Daily_plannerUncheckedCreateWithoutMost_importantInput>
    connectOrCreate?: Daily_plannerCreateOrConnectWithoutMost_importantInput
    connect?: Daily_plannerWhereUniqueInput
  }

  export type Daily_plannerUpdateOneRequiredWithoutMost_importantNestedInput = {
    create?: XOR<Daily_plannerCreateWithoutMost_importantInput, Daily_plannerUncheckedCreateWithoutMost_importantInput>
    connectOrCreate?: Daily_plannerCreateOrConnectWithoutMost_importantInput
    upsert?: Daily_plannerUpsertWithoutMost_importantInput
    connect?: Daily_plannerWhereUniqueInput
    update?: XOR<Daily_plannerUpdateWithoutMost_importantInput, Daily_plannerUncheckedUpdateWithoutMost_importantInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type AnimeCreateWithoutUsersInput = {
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutAnimeInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutAnimeInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutUsersInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutUsersInput, AnimeUncheckedCreateWithoutUsersInput>
  }

  export type Anime_user_rankCreateWithoutUserInput = {
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
    anime: AnimeCreateNestedOneWithoutAnime_user_rankInput
  }

  export type Anime_user_rankUncheckedCreateWithoutUserInput = {
    id?: number
    anime_id: number
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_rankCreateOrConnectWithoutUserInput = {
    where: Anime_user_rankWhereUniqueInput
    create: XOR<Anime_user_rankCreateWithoutUserInput, Anime_user_rankUncheckedCreateWithoutUserInput>
  }

  export type Anime_user_rankCreateManyUserInputEnvelope = {
    data: Enumerable<Anime_user_rankCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type Anime_user_plannedCreateWithoutUserInput = {
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
    anime: AnimeCreateNestedOneWithoutAnime_user_plannedInput
  }

  export type Anime_user_plannedUncheckedCreateWithoutUserInput = {
    id?: number
    anime_id: number
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_plannedCreateOrConnectWithoutUserInput = {
    where: Anime_user_plannedWhereUniqueInput
    create: XOR<Anime_user_plannedCreateWithoutUserInput, Anime_user_plannedUncheckedCreateWithoutUserInput>
  }

  export type Anime_user_plannedCreateManyUserInputEnvelope = {
    data: Enumerable<Anime_user_plannedCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type Monthly_plannerCreateWithoutUserInput = {
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Monthly_to_do_listCreateNestedManyWithoutMonthly_plannerInput
    daily_planner?: Daily_plannerCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerUncheckedCreateWithoutUserInput = {
    id?: number
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Monthly_to_do_listUncheckedCreateNestedManyWithoutMonthly_plannerInput
    daily_planner?: Daily_plannerUncheckedCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerCreateOrConnectWithoutUserInput = {
    where: Monthly_plannerWhereUniqueInput
    create: XOR<Monthly_plannerCreateWithoutUserInput, Monthly_plannerUncheckedCreateWithoutUserInput>
  }

  export type Monthly_plannerCreateManyUserInputEnvelope = {
    data: Enumerable<Monthly_plannerCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AnimeUpsertWithWhereUniqueWithoutUsersInput = {
    where: AnimeWhereUniqueInput
    update: XOR<AnimeUpdateWithoutUsersInput, AnimeUncheckedUpdateWithoutUsersInput>
    create: XOR<AnimeCreateWithoutUsersInput, AnimeUncheckedCreateWithoutUsersInput>
  }

  export type AnimeUpdateWithWhereUniqueWithoutUsersInput = {
    where: AnimeWhereUniqueInput
    data: XOR<AnimeUpdateWithoutUsersInput, AnimeUncheckedUpdateWithoutUsersInput>
  }

  export type AnimeUpdateManyWithWhereWithoutUsersInput = {
    where: AnimeScalarWhereInput
    data: XOR<AnimeUpdateManyMutationInput, AnimeUncheckedUpdateManyWithoutAnimeInput>
  }

  export type AnimeScalarWhereInput = {
    AND?: Enumerable<AnimeScalarWhereInput>
    OR?: Enumerable<AnimeScalarWhereInput>
    NOT?: Enumerable<AnimeScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    category?: StringFilter | string
    description?: StringFilter | string
    anime_pic?: StringFilter | string
    avg_rank?: FloatFilter | number
    amount?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
  }

  export type Anime_user_rankUpsertWithWhereUniqueWithoutUserInput = {
    where: Anime_user_rankWhereUniqueInput
    update: XOR<Anime_user_rankUpdateWithoutUserInput, Anime_user_rankUncheckedUpdateWithoutUserInput>
    create: XOR<Anime_user_rankCreateWithoutUserInput, Anime_user_rankUncheckedCreateWithoutUserInput>
  }

  export type Anime_user_rankUpdateWithWhereUniqueWithoutUserInput = {
    where: Anime_user_rankWhereUniqueInput
    data: XOR<Anime_user_rankUpdateWithoutUserInput, Anime_user_rankUncheckedUpdateWithoutUserInput>
  }

  export type Anime_user_rankUpdateManyWithWhereWithoutUserInput = {
    where: Anime_user_rankScalarWhereInput
    data: XOR<Anime_user_rankUpdateManyMutationInput, Anime_user_rankUncheckedUpdateManyWithoutAnime_user_rankInput>
  }

  export type Anime_user_rankScalarWhereInput = {
    AND?: Enumerable<Anime_user_rankScalarWhereInput>
    OR?: Enumerable<Anime_user_rankScalarWhereInput>
    NOT?: Enumerable<Anime_user_rankScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    anime_id?: IntFilter | number
    rank?: StringFilter | string
    description?: StringFilter | string
    anime_pic?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
  }

  export type Anime_user_plannedUpsertWithWhereUniqueWithoutUserInput = {
    where: Anime_user_plannedWhereUniqueInput
    update: XOR<Anime_user_plannedUpdateWithoutUserInput, Anime_user_plannedUncheckedUpdateWithoutUserInput>
    create: XOR<Anime_user_plannedCreateWithoutUserInput, Anime_user_plannedUncheckedCreateWithoutUserInput>
  }

  export type Anime_user_plannedUpdateWithWhereUniqueWithoutUserInput = {
    where: Anime_user_plannedWhereUniqueInput
    data: XOR<Anime_user_plannedUpdateWithoutUserInput, Anime_user_plannedUncheckedUpdateWithoutUserInput>
  }

  export type Anime_user_plannedUpdateManyWithWhereWithoutUserInput = {
    where: Anime_user_plannedScalarWhereInput
    data: XOR<Anime_user_plannedUpdateManyMutationInput, Anime_user_plannedUncheckedUpdateManyWithoutAnime_user_plannedInput>
  }

  export type Anime_user_plannedScalarWhereInput = {
    AND?: Enumerable<Anime_user_plannedScalarWhereInput>
    OR?: Enumerable<Anime_user_plannedScalarWhereInput>
    NOT?: Enumerable<Anime_user_plannedScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    anime_id?: IntFilter | number
    isPlanned?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
  }

  export type Monthly_plannerUpsertWithWhereUniqueWithoutUserInput = {
    where: Monthly_plannerWhereUniqueInput
    update: XOR<Monthly_plannerUpdateWithoutUserInput, Monthly_plannerUncheckedUpdateWithoutUserInput>
    create: XOR<Monthly_plannerCreateWithoutUserInput, Monthly_plannerUncheckedCreateWithoutUserInput>
  }

  export type Monthly_plannerUpdateWithWhereUniqueWithoutUserInput = {
    where: Monthly_plannerWhereUniqueInput
    data: XOR<Monthly_plannerUpdateWithoutUserInput, Monthly_plannerUncheckedUpdateWithoutUserInput>
  }

  export type Monthly_plannerUpdateManyWithWhereWithoutUserInput = {
    where: Monthly_plannerScalarWhereInput
    data: XOR<Monthly_plannerUpdateManyMutationInput, Monthly_plannerUncheckedUpdateManyWithoutMonthly_plannerInput>
  }

  export type Monthly_plannerScalarWhereInput = {
    AND?: Enumerable<Monthly_plannerScalarWhereInput>
    OR?: Enumerable<Monthly_plannerScalarWhereInput>
    NOT?: Enumerable<Monthly_plannerScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    month?: StringFilter | string
    year?: StringFilter | string
    notes?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutAnimeInput = {
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutUserInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnimeInput = {
    id?: number
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutUserInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnimeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnimeInput, UserUncheckedCreateWithoutAnimeInput>
  }

  export type Anime_user_rankCreateWithoutAnimeInput = {
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutAnime_user_rankInput
  }

  export type Anime_user_rankUncheckedCreateWithoutAnimeInput = {
    id?: number
    user_id: number
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_rankCreateOrConnectWithoutAnimeInput = {
    where: Anime_user_rankWhereUniqueInput
    create: XOR<Anime_user_rankCreateWithoutAnimeInput, Anime_user_rankUncheckedCreateWithoutAnimeInput>
  }

  export type Anime_user_rankCreateManyAnimeInputEnvelope = {
    data: Enumerable<Anime_user_rankCreateManyAnimeInput>
    skipDuplicates?: boolean
  }

  export type Anime_user_plannedCreateWithoutAnimeInput = {
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutAnime_user_plannedInput
  }

  export type Anime_user_plannedUncheckedCreateWithoutAnimeInput = {
    id?: number
    user_id: number
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_plannedCreateOrConnectWithoutAnimeInput = {
    where: Anime_user_plannedWhereUniqueInput
    create: XOR<Anime_user_plannedCreateWithoutAnimeInput, Anime_user_plannedUncheckedCreateWithoutAnimeInput>
  }

  export type Anime_user_plannedCreateManyAnimeInputEnvelope = {
    data: Enumerable<Anime_user_plannedCreateManyAnimeInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAnimeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAnimeInput, UserUncheckedUpdateWithoutAnimeInput>
    create: XOR<UserCreateWithoutAnimeInput, UserUncheckedCreateWithoutAnimeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAnimeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAnimeInput, UserUncheckedUpdateWithoutAnimeInput>
  }

  export type UserUpdateManyWithWhereWithoutAnimeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
    user_pic?: StringFilter | string
  }

  export type Anime_user_rankUpsertWithWhereUniqueWithoutAnimeInput = {
    where: Anime_user_rankWhereUniqueInput
    update: XOR<Anime_user_rankUpdateWithoutAnimeInput, Anime_user_rankUncheckedUpdateWithoutAnimeInput>
    create: XOR<Anime_user_rankCreateWithoutAnimeInput, Anime_user_rankUncheckedCreateWithoutAnimeInput>
  }

  export type Anime_user_rankUpdateWithWhereUniqueWithoutAnimeInput = {
    where: Anime_user_rankWhereUniqueInput
    data: XOR<Anime_user_rankUpdateWithoutAnimeInput, Anime_user_rankUncheckedUpdateWithoutAnimeInput>
  }

  export type Anime_user_rankUpdateManyWithWhereWithoutAnimeInput = {
    where: Anime_user_rankScalarWhereInput
    data: XOR<Anime_user_rankUpdateManyMutationInput, Anime_user_rankUncheckedUpdateManyWithoutAnime_user_rankInput>
  }

  export type Anime_user_plannedUpsertWithWhereUniqueWithoutAnimeInput = {
    where: Anime_user_plannedWhereUniqueInput
    update: XOR<Anime_user_plannedUpdateWithoutAnimeInput, Anime_user_plannedUncheckedUpdateWithoutAnimeInput>
    create: XOR<Anime_user_plannedCreateWithoutAnimeInput, Anime_user_plannedUncheckedCreateWithoutAnimeInput>
  }

  export type Anime_user_plannedUpdateWithWhereUniqueWithoutAnimeInput = {
    where: Anime_user_plannedWhereUniqueInput
    data: XOR<Anime_user_plannedUpdateWithoutAnimeInput, Anime_user_plannedUncheckedUpdateWithoutAnimeInput>
  }

  export type Anime_user_plannedUpdateManyWithWhereWithoutAnimeInput = {
    where: Anime_user_plannedScalarWhereInput
    data: XOR<Anime_user_plannedUpdateManyMutationInput, Anime_user_plannedUncheckedUpdateManyWithoutAnime_user_plannedInput>
  }

  export type UserCreateWithoutAnime_user_rankInput = {
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeCreateNestedManyWithoutUsersInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnime_user_rankInput = {
    id?: number
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeUncheckedCreateNestedManyWithoutUsersInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnime_user_rankInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnime_user_rankInput, UserUncheckedCreateWithoutAnime_user_rankInput>
  }

  export type AnimeCreateWithoutAnime_user_rankInput = {
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    users?: UserCreateNestedManyWithoutAnimeInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutAnime_user_rankInput = {
    id?: number
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAnimeInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutAnime_user_rankInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutAnime_user_rankInput, AnimeUncheckedCreateWithoutAnime_user_rankInput>
  }

  export type UserUpsertWithoutAnime_user_rankInput = {
    update: XOR<UserUpdateWithoutAnime_user_rankInput, UserUncheckedUpdateWithoutAnime_user_rankInput>
    create: XOR<UserCreateWithoutAnime_user_rankInput, UserUncheckedCreateWithoutAnime_user_rankInput>
  }

  export type UserUpdateWithoutAnime_user_rankInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUpdateManyWithoutUsersNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnime_user_rankInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUncheckedUpdateManyWithoutUsersNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnimeUpsertWithoutAnime_user_rankInput = {
    update: XOR<AnimeUpdateWithoutAnime_user_rankInput, AnimeUncheckedUpdateWithoutAnime_user_rankInput>
    create: XOR<AnimeCreateWithoutAnime_user_rankInput, AnimeUncheckedCreateWithoutAnime_user_rankInput>
  }

  export type AnimeUpdateWithoutAnime_user_rankInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAnimeNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutAnime_user_rankInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAnimeNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type UserCreateWithoutAnime_user_plannedInput = {
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeCreateNestedManyWithoutUsersInput
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnime_user_plannedInput = {
    id?: number
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeUncheckedCreateNestedManyWithoutUsersInput
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutUserInput
    monthly_planner?: Monthly_plannerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnime_user_plannedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnime_user_plannedInput, UserUncheckedCreateWithoutAnime_user_plannedInput>
  }

  export type AnimeCreateWithoutAnime_user_plannedInput = {
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    users?: UserCreateNestedManyWithoutAnimeInput
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutAnimeInput
  }

  export type AnimeUncheckedCreateWithoutAnime_user_plannedInput = {
    id?: number
    name: string
    category: string
    description?: string
    anime_pic?: string
    avg_rank?: number
    amount?: number
    created_at?: Date | string
    modified_at?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAnimeInput
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutAnimeInput
  }

  export type AnimeCreateOrConnectWithoutAnime_user_plannedInput = {
    where: AnimeWhereUniqueInput
    create: XOR<AnimeCreateWithoutAnime_user_plannedInput, AnimeUncheckedCreateWithoutAnime_user_plannedInput>
  }

  export type UserUpsertWithoutAnime_user_plannedInput = {
    update: XOR<UserUpdateWithoutAnime_user_plannedInput, UserUncheckedUpdateWithoutAnime_user_plannedInput>
    create: XOR<UserCreateWithoutAnime_user_plannedInput, UserUncheckedCreateWithoutAnime_user_plannedInput>
  }

  export type UserUpdateWithoutAnime_user_plannedInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUpdateManyWithoutUsersNestedInput
    anime_user_rank?: Anime_user_rankUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnime_user_plannedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUncheckedUpdateManyWithoutUsersNestedInput
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnimeUpsertWithoutAnime_user_plannedInput = {
    update: XOR<AnimeUpdateWithoutAnime_user_plannedInput, AnimeUncheckedUpdateWithoutAnime_user_plannedInput>
    create: XOR<AnimeCreateWithoutAnime_user_plannedInput, AnimeUncheckedCreateWithoutAnime_user_plannedInput>
  }

  export type AnimeUpdateWithoutAnime_user_plannedInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAnimeNestedInput
    anime_user_rank?: Anime_user_rankUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutAnime_user_plannedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAnimeNestedInput
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type UserCreateWithoutMonthly_plannerInput = {
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeCreateNestedManyWithoutUsersInput
    anime_user_rank?: Anime_user_rankCreateNestedManyWithoutUserInput
    anime_user_planned?: Anime_user_plannedCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMonthly_plannerInput = {
    id?: number
    username: string
    password: string
    name: string
    created_at?: Date | string
    modified_at?: Date | string
    user_pic?: string
    anime?: AnimeUncheckedCreateNestedManyWithoutUsersInput
    anime_user_rank?: Anime_user_rankUncheckedCreateNestedManyWithoutUserInput
    anime_user_planned?: Anime_user_plannedUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMonthly_plannerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMonthly_plannerInput, UserUncheckedCreateWithoutMonthly_plannerInput>
  }

  export type Monthly_to_do_listCreateWithoutMonthly_plannerInput = {
    data?: string
  }

  export type Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput = {
    id?: number
    data?: string
  }

  export type Monthly_to_do_listCreateOrConnectWithoutMonthly_plannerInput = {
    where: Monthly_to_do_listWhereUniqueInput
    create: XOR<Monthly_to_do_listCreateWithoutMonthly_plannerInput, Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput>
  }

  export type Monthly_to_do_listCreateManyMonthly_plannerInputEnvelope = {
    data: Enumerable<Monthly_to_do_listCreateManyMonthly_plannerInput>
    skipDuplicates?: boolean
  }

  export type Daily_plannerCreateWithoutMonthly_plannerInput = {
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Daily_to_do_listCreateNestedManyWithoutDaily_plannerInput
    most_important?: Daily_most_importantCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerUncheckedCreateWithoutMonthly_plannerInput = {
    id?: number
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Daily_to_do_listUncheckedCreateNestedManyWithoutDaily_plannerInput
    most_important?: Daily_most_importantUncheckedCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerCreateOrConnectWithoutMonthly_plannerInput = {
    where: Daily_plannerWhereUniqueInput
    create: XOR<Daily_plannerCreateWithoutMonthly_plannerInput, Daily_plannerUncheckedCreateWithoutMonthly_plannerInput>
  }

  export type Daily_plannerCreateManyMonthly_plannerInputEnvelope = {
    data: Enumerable<Daily_plannerCreateManyMonthly_plannerInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMonthly_plannerInput = {
    update: XOR<UserUpdateWithoutMonthly_plannerInput, UserUncheckedUpdateWithoutMonthly_plannerInput>
    create: XOR<UserCreateWithoutMonthly_plannerInput, UserUncheckedCreateWithoutMonthly_plannerInput>
  }

  export type UserUpdateWithoutMonthly_plannerInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUpdateManyWithoutUsersNestedInput
    anime_user_rank?: Anime_user_rankUpdateManyWithoutUserNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMonthly_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime?: AnimeUncheckedUpdateManyWithoutUsersNestedInput
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutUserNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutUserNestedInput
  }

  export type Monthly_to_do_listUpsertWithWhereUniqueWithoutMonthly_plannerInput = {
    where: Monthly_to_do_listWhereUniqueInput
    update: XOR<Monthly_to_do_listUpdateWithoutMonthly_plannerInput, Monthly_to_do_listUncheckedUpdateWithoutMonthly_plannerInput>
    create: XOR<Monthly_to_do_listCreateWithoutMonthly_plannerInput, Monthly_to_do_listUncheckedCreateWithoutMonthly_plannerInput>
  }

  export type Monthly_to_do_listUpdateWithWhereUniqueWithoutMonthly_plannerInput = {
    where: Monthly_to_do_listWhereUniqueInput
    data: XOR<Monthly_to_do_listUpdateWithoutMonthly_plannerInput, Monthly_to_do_listUncheckedUpdateWithoutMonthly_plannerInput>
  }

  export type Monthly_to_do_listUpdateManyWithWhereWithoutMonthly_plannerInput = {
    where: Monthly_to_do_listScalarWhereInput
    data: XOR<Monthly_to_do_listUpdateManyMutationInput, Monthly_to_do_listUncheckedUpdateManyWithoutTo_do_listInput>
  }

  export type Monthly_to_do_listScalarWhereInput = {
    AND?: Enumerable<Monthly_to_do_listScalarWhereInput>
    OR?: Enumerable<Monthly_to_do_listScalarWhereInput>
    NOT?: Enumerable<Monthly_to_do_listScalarWhereInput>
    id?: IntFilter | number
    monthly_planner_id?: IntFilter | number
    data?: StringFilter | string
  }

  export type Daily_plannerUpsertWithWhereUniqueWithoutMonthly_plannerInput = {
    where: Daily_plannerWhereUniqueInput
    update: XOR<Daily_plannerUpdateWithoutMonthly_plannerInput, Daily_plannerUncheckedUpdateWithoutMonthly_plannerInput>
    create: XOR<Daily_plannerCreateWithoutMonthly_plannerInput, Daily_plannerUncheckedCreateWithoutMonthly_plannerInput>
  }

  export type Daily_plannerUpdateWithWhereUniqueWithoutMonthly_plannerInput = {
    where: Daily_plannerWhereUniqueInput
    data: XOR<Daily_plannerUpdateWithoutMonthly_plannerInput, Daily_plannerUncheckedUpdateWithoutMonthly_plannerInput>
  }

  export type Daily_plannerUpdateManyWithWhereWithoutMonthly_plannerInput = {
    where: Daily_plannerScalarWhereInput
    data: XOR<Daily_plannerUpdateManyMutationInput, Daily_plannerUncheckedUpdateManyWithoutDaily_plannerInput>
  }

  export type Daily_plannerScalarWhereInput = {
    AND?: Enumerable<Daily_plannerScalarWhereInput>
    OR?: Enumerable<Daily_plannerScalarWhereInput>
    NOT?: Enumerable<Daily_plannerScalarWhereInput>
    id?: IntFilter | number
    monthly_planner_id?: IntFilter | number
    day?: StringFilter | string
    weekday?: StringFilter | string
    notes?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    modified_at?: DateTimeFilter | Date | string
  }

  export type Monthly_plannerCreateWithoutTo_do_listInput = {
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutMonthly_plannerInput
    daily_planner?: Daily_plannerCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerUncheckedCreateWithoutTo_do_listInput = {
    id?: number
    user_id: number
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    daily_planner?: Daily_plannerUncheckedCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerCreateOrConnectWithoutTo_do_listInput = {
    where: Monthly_plannerWhereUniqueInput
    create: XOR<Monthly_plannerCreateWithoutTo_do_listInput, Monthly_plannerUncheckedCreateWithoutTo_do_listInput>
  }

  export type Monthly_plannerUpsertWithoutTo_do_listInput = {
    update: XOR<Monthly_plannerUpdateWithoutTo_do_listInput, Monthly_plannerUncheckedUpdateWithoutTo_do_listInput>
    create: XOR<Monthly_plannerCreateWithoutTo_do_listInput, Monthly_plannerUncheckedCreateWithoutTo_do_listInput>
  }

  export type Monthly_plannerUpdateWithoutTo_do_listInput = {
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutMonthly_plannerNestedInput
    daily_planner?: Daily_plannerUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerUncheckedUpdateWithoutTo_do_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    daily_planner?: Daily_plannerUncheckedUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerCreateWithoutDaily_plannerInput = {
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    User: UserCreateNestedOneWithoutMonthly_plannerInput
    to_do_list?: Monthly_to_do_listCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerUncheckedCreateWithoutDaily_plannerInput = {
    id?: number
    user_id: number
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Monthly_to_do_listUncheckedCreateNestedManyWithoutMonthly_plannerInput
  }

  export type Monthly_plannerCreateOrConnectWithoutDaily_plannerInput = {
    where: Monthly_plannerWhereUniqueInput
    create: XOR<Monthly_plannerCreateWithoutDaily_plannerInput, Monthly_plannerUncheckedCreateWithoutDaily_plannerInput>
  }

  export type Daily_to_do_listCreateWithoutDaily_plannerInput = {
    data?: string
  }

  export type Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput = {
    id?: number
    data?: string
  }

  export type Daily_to_do_listCreateOrConnectWithoutDaily_plannerInput = {
    where: Daily_to_do_listWhereUniqueInput
    create: XOR<Daily_to_do_listCreateWithoutDaily_plannerInput, Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput>
  }

  export type Daily_to_do_listCreateManyDaily_plannerInputEnvelope = {
    data: Enumerable<Daily_to_do_listCreateManyDaily_plannerInput>
    skipDuplicates?: boolean
  }

  export type Daily_most_importantCreateWithoutDaily_plannerInput = {
    data?: string
  }

  export type Daily_most_importantUncheckedCreateWithoutDaily_plannerInput = {
    id?: number
    data?: string
  }

  export type Daily_most_importantCreateOrConnectWithoutDaily_plannerInput = {
    where: Daily_most_importantWhereUniqueInput
    create: XOR<Daily_most_importantCreateWithoutDaily_plannerInput, Daily_most_importantUncheckedCreateWithoutDaily_plannerInput>
  }

  export type Daily_most_importantCreateManyDaily_plannerInputEnvelope = {
    data: Enumerable<Daily_most_importantCreateManyDaily_plannerInput>
    skipDuplicates?: boolean
  }

  export type Monthly_plannerUpsertWithoutDaily_plannerInput = {
    update: XOR<Monthly_plannerUpdateWithoutDaily_plannerInput, Monthly_plannerUncheckedUpdateWithoutDaily_plannerInput>
    create: XOR<Monthly_plannerCreateWithoutDaily_plannerInput, Monthly_plannerUncheckedCreateWithoutDaily_plannerInput>
  }

  export type Monthly_plannerUpdateWithoutDaily_plannerInput = {
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutMonthly_plannerNestedInput
    to_do_list?: Monthly_to_do_listUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerUncheckedUpdateWithoutDaily_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Monthly_to_do_listUncheckedUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Daily_to_do_listUpsertWithWhereUniqueWithoutDaily_plannerInput = {
    where: Daily_to_do_listWhereUniqueInput
    update: XOR<Daily_to_do_listUpdateWithoutDaily_plannerInput, Daily_to_do_listUncheckedUpdateWithoutDaily_plannerInput>
    create: XOR<Daily_to_do_listCreateWithoutDaily_plannerInput, Daily_to_do_listUncheckedCreateWithoutDaily_plannerInput>
  }

  export type Daily_to_do_listUpdateWithWhereUniqueWithoutDaily_plannerInput = {
    where: Daily_to_do_listWhereUniqueInput
    data: XOR<Daily_to_do_listUpdateWithoutDaily_plannerInput, Daily_to_do_listUncheckedUpdateWithoutDaily_plannerInput>
  }

  export type Daily_to_do_listUpdateManyWithWhereWithoutDaily_plannerInput = {
    where: Daily_to_do_listScalarWhereInput
    data: XOR<Daily_to_do_listUpdateManyMutationInput, Daily_to_do_listUncheckedUpdateManyWithoutTo_do_listInput>
  }

  export type Daily_to_do_listScalarWhereInput = {
    AND?: Enumerable<Daily_to_do_listScalarWhereInput>
    OR?: Enumerable<Daily_to_do_listScalarWhereInput>
    NOT?: Enumerable<Daily_to_do_listScalarWhereInput>
    id?: IntFilter | number
    daily_planner_id?: IntFilter | number
    data?: StringFilter | string
  }

  export type Daily_most_importantUpsertWithWhereUniqueWithoutDaily_plannerInput = {
    where: Daily_most_importantWhereUniqueInput
    update: XOR<Daily_most_importantUpdateWithoutDaily_plannerInput, Daily_most_importantUncheckedUpdateWithoutDaily_plannerInput>
    create: XOR<Daily_most_importantCreateWithoutDaily_plannerInput, Daily_most_importantUncheckedCreateWithoutDaily_plannerInput>
  }

  export type Daily_most_importantUpdateWithWhereUniqueWithoutDaily_plannerInput = {
    where: Daily_most_importantWhereUniqueInput
    data: XOR<Daily_most_importantUpdateWithoutDaily_plannerInput, Daily_most_importantUncheckedUpdateWithoutDaily_plannerInput>
  }

  export type Daily_most_importantUpdateManyWithWhereWithoutDaily_plannerInput = {
    where: Daily_most_importantScalarWhereInput
    data: XOR<Daily_most_importantUpdateManyMutationInput, Daily_most_importantUncheckedUpdateManyWithoutMost_importantInput>
  }

  export type Daily_most_importantScalarWhereInput = {
    AND?: Enumerable<Daily_most_importantScalarWhereInput>
    OR?: Enumerable<Daily_most_importantScalarWhereInput>
    NOT?: Enumerable<Daily_most_importantScalarWhereInput>
    id?: IntFilter | number
    daily_planner_id?: IntFilter | number
    data?: StringFilter | string
  }

  export type Daily_plannerCreateWithoutTo_do_listInput = {
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    Monthly_planner: Monthly_plannerCreateNestedOneWithoutDaily_plannerInput
    most_important?: Daily_most_importantCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerUncheckedCreateWithoutTo_do_listInput = {
    id?: number
    monthly_planner_id: number
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    most_important?: Daily_most_importantUncheckedCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerCreateOrConnectWithoutTo_do_listInput = {
    where: Daily_plannerWhereUniqueInput
    create: XOR<Daily_plannerCreateWithoutTo_do_listInput, Daily_plannerUncheckedCreateWithoutTo_do_listInput>
  }

  export type Daily_plannerUpsertWithoutTo_do_listInput = {
    update: XOR<Daily_plannerUpdateWithoutTo_do_listInput, Daily_plannerUncheckedUpdateWithoutTo_do_listInput>
    create: XOR<Daily_plannerCreateWithoutTo_do_listInput, Daily_plannerUncheckedCreateWithoutTo_do_listInput>
  }

  export type Daily_plannerUpdateWithoutTo_do_listInput = {
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Monthly_planner?: Monthly_plannerUpdateOneRequiredWithoutDaily_plannerNestedInput
    most_important?: Daily_most_importantUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerUncheckedUpdateWithoutTo_do_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    monthly_planner_id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    most_important?: Daily_most_importantUncheckedUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerCreateWithoutMost_importantInput = {
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    Monthly_planner: Monthly_plannerCreateNestedOneWithoutDaily_plannerInput
    to_do_list?: Daily_to_do_listCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerUncheckedCreateWithoutMost_importantInput = {
    id?: number
    monthly_planner_id: number
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
    to_do_list?: Daily_to_do_listUncheckedCreateNestedManyWithoutDaily_plannerInput
  }

  export type Daily_plannerCreateOrConnectWithoutMost_importantInput = {
    where: Daily_plannerWhereUniqueInput
    create: XOR<Daily_plannerCreateWithoutMost_importantInput, Daily_plannerUncheckedCreateWithoutMost_importantInput>
  }

  export type Daily_plannerUpsertWithoutMost_importantInput = {
    update: XOR<Daily_plannerUpdateWithoutMost_importantInput, Daily_plannerUncheckedUpdateWithoutMost_importantInput>
    create: XOR<Daily_plannerCreateWithoutMost_importantInput, Daily_plannerUncheckedCreateWithoutMost_importantInput>
  }

  export type Daily_plannerUpdateWithoutMost_importantInput = {
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Monthly_planner?: Monthly_plannerUpdateOneRequiredWithoutDaily_plannerNestedInput
    to_do_list?: Daily_to_do_listUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerUncheckedUpdateWithoutMost_importantInput = {
    id?: IntFieldUpdateOperationsInput | number
    monthly_planner_id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Daily_to_do_listUncheckedUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Anime_user_rankCreateManyUserInput = {
    id?: number
    anime_id: number
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_plannedCreateManyUserInput = {
    id?: number
    anime_id: number
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Monthly_plannerCreateManyUserInput = {
    id?: number
    month: string
    year: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type AnimeUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    anime_user_rank?: Anime_user_rankUpdateManyWithoutAnimeNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutAnimeNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutAnimeNestedInput
  }

  export type AnimeUncheckedUpdateManyWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    avg_rank?: FloatFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_rankUpdateWithoutUserInput = {
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutAnime_user_rankNestedInput
  }

  export type Anime_user_rankUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_rankUncheckedUpdateManyWithoutAnime_user_rankInput = {
    id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_plannedUpdateWithoutUserInput = {
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    anime?: AnimeUpdateOneRequiredWithoutAnime_user_plannedNestedInput
  }

  export type Anime_user_plannedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_plannedUncheckedUpdateManyWithoutAnime_user_plannedInput = {
    id?: IntFieldUpdateOperationsInput | number
    anime_id?: IntFieldUpdateOperationsInput | number
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Monthly_plannerUpdateWithoutUserInput = {
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Monthly_to_do_listUpdateManyWithoutMonthly_plannerNestedInput
    daily_planner?: Daily_plannerUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Monthly_to_do_listUncheckedUpdateManyWithoutMonthly_plannerNestedInput
    daily_planner?: Daily_plannerUncheckedUpdateManyWithoutMonthly_plannerNestedInput
  }

  export type Monthly_plannerUncheckedUpdateManyWithoutMonthly_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    month?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_rankCreateManyAnimeInput = {
    id?: number
    user_id: number
    rank: string
    description?: string
    anime_pic?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Anime_user_plannedCreateManyAnimeInput = {
    id?: number
    user_id: number
    isPlanned?: boolean
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type UserUpdateWithoutAnimeInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime_user_rank?: Anime_user_rankUpdateManyWithoutUserNestedInput
    anime_user_planned?: Anime_user_plannedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
    anime_user_rank?: Anime_user_rankUncheckedUpdateManyWithoutUserNestedInput
    anime_user_planned?: Anime_user_plannedUncheckedUpdateManyWithoutUserNestedInput
    monthly_planner?: Monthly_plannerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_pic?: StringFieldUpdateOperationsInput | string
  }

  export type Anime_user_rankUpdateWithoutAnimeInput = {
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAnime_user_rankNestedInput
  }

  export type Anime_user_rankUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rank?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    anime_pic?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Anime_user_plannedUpdateWithoutAnimeInput = {
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAnime_user_plannedNestedInput
  }

  export type Anime_user_plannedUncheckedUpdateWithoutAnimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    isPlanned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Monthly_to_do_listCreateManyMonthly_plannerInput = {
    id?: number
    data?: string
  }

  export type Daily_plannerCreateManyMonthly_plannerInput = {
    id?: number
    day: string
    weekday: string
    notes?: string
    created_at?: Date | string
    modified_at?: Date | string
  }

  export type Monthly_to_do_listUpdateWithoutMonthly_plannerInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Monthly_to_do_listUncheckedUpdateWithoutMonthly_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Monthly_to_do_listUncheckedUpdateManyWithoutTo_do_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_plannerUpdateWithoutMonthly_plannerInput = {
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Daily_to_do_listUpdateManyWithoutDaily_plannerNestedInput
    most_important?: Daily_most_importantUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerUncheckedUpdateWithoutMonthly_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    to_do_list?: Daily_to_do_listUncheckedUpdateManyWithoutDaily_plannerNestedInput
    most_important?: Daily_most_importantUncheckedUpdateManyWithoutDaily_plannerNestedInput
  }

  export type Daily_plannerUncheckedUpdateManyWithoutDaily_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    weekday?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    modified_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Daily_to_do_listCreateManyDaily_plannerInput = {
    id?: number
    data?: string
  }

  export type Daily_most_importantCreateManyDaily_plannerInput = {
    id?: number
    data?: string
  }

  export type Daily_to_do_listUpdateWithoutDaily_plannerInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_to_do_listUncheckedUpdateWithoutDaily_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_to_do_listUncheckedUpdateManyWithoutTo_do_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_most_importantUpdateWithoutDaily_plannerInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_most_importantUncheckedUpdateWithoutDaily_plannerInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type Daily_most_importantUncheckedUpdateManyWithoutMost_importantInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}