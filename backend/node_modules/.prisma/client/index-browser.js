
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AnimeOrderByRelevanceFieldEnum = {
  name: 'name',
  category: 'category',
  description: 'description',
  anime_pic: 'anime_pic'
};

exports.Prisma.AnimeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  anime_pic: 'anime_pic',
  avg_rank: 'avg_rank',
  amount: 'amount',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.Anime_user_plannedScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  anime_id: 'anime_id',
  isPlanned: 'isPlanned',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.Anime_user_rankOrderByRelevanceFieldEnum = {
  rank: 'rank',
  description: 'description',
  anime_pic: 'anime_pic'
};

exports.Prisma.Anime_user_rankScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  anime_id: 'anime_id',
  rank: 'rank',
  description: 'description',
  anime_pic: 'anime_pic',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.Daily_most_importantOrderByRelevanceFieldEnum = {
  data: 'data'
};

exports.Prisma.Daily_most_importantScalarFieldEnum = {
  id: 'id',
  daily_planner_id: 'daily_planner_id',
  data: 'data'
};

exports.Prisma.Daily_plannerOrderByRelevanceFieldEnum = {
  day: 'day',
  weekday: 'weekday',
  notes: 'notes'
};

exports.Prisma.Daily_plannerScalarFieldEnum = {
  id: 'id',
  monthly_planner_id: 'monthly_planner_id',
  day: 'day',
  weekday: 'weekday',
  notes: 'notes',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.Daily_to_do_listOrderByRelevanceFieldEnum = {
  data: 'data'
};

exports.Prisma.Daily_to_do_listScalarFieldEnum = {
  id: 'id',
  daily_planner_id: 'daily_planner_id',
  data: 'data'
};

exports.Prisma.Monthly_plannerOrderByRelevanceFieldEnum = {
  month: 'month',
  year: 'year',
  notes: 'notes'
};

exports.Prisma.Monthly_plannerScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  month: 'month',
  year: 'year',
  notes: 'notes',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.Monthly_to_do_listOrderByRelevanceFieldEnum = {
  data: 'data'
};

exports.Prisma.Monthly_to_do_listScalarFieldEnum = {
  id: 'id',
  monthly_planner_id: 'monthly_planner_id',
  data: 'data'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sid: 'sid',
  data: 'data'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sid: 'sid',
  data: 'data',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  name: 'name',
  user_pic: 'user_pic'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  name: 'name',
  created_at: 'created_at',
  modified_at: 'modified_at',
  user_pic: 'user_pic'
};


exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Anime: 'Anime',
  Anime_user_rank: 'Anime_user_rank',
  Anime_user_planned: 'Anime_user_planned',
  Monthly_planner: 'Monthly_planner',
  Monthly_to_do_list: 'Monthly_to_do_list',
  Daily_planner: 'Daily_planner',
  Daily_to_do_list: 'Daily_to_do_list',
  Daily_most_important: 'Daily_most_important'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
